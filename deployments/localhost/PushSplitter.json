{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shares",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0556a120a02090df08fa8d1c4ff18d2e4afe4b413c067ab4b3b4ddc571dd0ed6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "672027",
    "logsBloom": "0x
    "blockHash": "0x33900148150615578d904940d25dd309b3d854d3247ba592e04068b751ff2d51",
    "transactionHash": "0x0556a120a02090df08fa8d1c4ff18d2e4afe4b413c067ab4b3b4ddc571dd0ed6",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "672027",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0c0658d873e75a15781f23104693522d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PushSplitter.sol\":\"PushSplitter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\n * \\n * Made with \\ud83e\\udde1 by www.Kreation.tech\\n */\\npragma solidity 0.8.10;\\n\\ninterface ISplitter {\\n    \\n    function initialize(address[] memory _payees, uint256[] memory _shares) external;\\n\\n}\",\"keccak256\":\"0x29db397b0efdeb4c26988b533f41b3d9567a1b9f7d7bab5b98c54971559fe120\",\"license\":\"MIT\"},\"contracts/PushSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\n * \\n * Made with \\ud83e\\udde1 by www.Kreation.tech\\n */\\npragma solidity 0.8.10;\\n\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./ISplitter.sol\\\";\\n\\ncontract PushSplitter is Initializable, ISplitter {\\n    address[] internal payees;\\n    mapping(address => uint16) internal shares;\\n    \\n    constructor() initializer { }\\n    \\n    function initialize(address[] memory _payees, uint256[] memory _shares) public override initializer {\\n        require(_payees.length == _shares.length, \\\"Splitter: inputs length mismatch\\\");\\n        require(_payees.length > 0, \\\"Splitter: no payees\\\");\\n        uint256 totalShares = 0;\\n        for (uint i = 0; i < _payees.length; i++) {\\n            _addPayee(_payees[i], _shares[i]);\\n            totalShares += _shares[i];\\n        }\\n        require(totalShares == 10_000, \\\"Shares don't sum up to 10000 pbs\\\");\\n    }\\n\\n    /**\\n     * Adds a new payee to the contract.\\n     * \\n     * @param _account the address of the payee to add.\\n     * @param _shares the number of shares owned by the payee.\\n     */\\n    function _addPayee(address _account, uint256 _shares) internal {\\n        require(_account != address(0x0), \\\"Splitter: account is 0x0 address\\\");\\n        require(_shares > 0 && _shares < 10_000, \\\"Splitter: invalid shares\\\");\\n        require(shares[_account] == 0, \\\"Splitter: account duplicated\\\");\\n\\n        payees.push(_account);\\n        shares[_account] = uint16(_shares);\\n    }\\n\\n    receive() external payable virtual {\\n        uint256 value = address(this).balance;\\n        for (uint i = 0; i < payees.length; i++) {\\n            uint256 amount = value * shares[payees[i]] / 10_000;\\n            Address.sendValue(payable(payees[i]), amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea998023afc59b3f717fbf7301fff6403b9e5e077c77e25bf832ae0e955150f0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600054610100900460ff168061002a575060005460ff16155b6100915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156100b3576000805461ffff19166101011790555b80156100c5576000805461ff00191690555b50610ad3806100d56000396000f3fe6080604052600436106100225760003560e01c80637fbbe46f146100f757600080fd5b366100f2574760005b6001548110156100ee57600061271060026000600185815481106100515761005161078d565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020546100919061ffff16856107eb565b61009b9190610828565b90506100db600183815481106100b3576100b361078d565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1682610119565b50806100e681610863565b91505061002b565b5050005b600080fd5b34801561010357600080fd5b506101176101123660046109a9565b61027d565b005b80471015610188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146101e2576040519150601f19603f3d011682016040523d82523d6000602084013e6101e7565b606091505b5050905080610278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161017f565b505050565b600054610100900460ff1680610296575060005460ff16155b610322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161017f565b600054610100900460ff1615801561036157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b81518351146103cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53706c69747465723a20696e70757473206c656e677468206d69736d61746368604482015260640161017f565b6000835111610437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f53706c69747465723a206e6f2070617965657300000000000000000000000000604482015260640161017f565b6000805b84518110156104b9576104808582815181106104595761045961078d565b60200260200101518583815181106104735761047361078d565b6020026020010151610559565b8381815181106104925761049261078d565b6020026020010151826104a59190610a85565b9150806104b181610863565b91505061043b565b508061271014610525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53686172657320646f6e27742073756d20757020746f20313030303020706273604482015260640161017f565b50801561027857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b73ffffffffffffffffffffffffffffffffffffffff82166105d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53706c69747465723a206163636f756e74206973203078302061646472657373604482015260640161017f565b6000811180156105e7575061271081105b61064d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f53706c69747465723a20696e76616c6964207368617265730000000000000000604482015260640161017f565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205461ffff16156106de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f53706c69747465723a206163636f756e74206475706c69636174656400000000604482015260640161017f565b600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff93909316928317905560009182526002602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610823576108236107bc565b500290565b60008261085e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610895576108956107bc565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156109125761091261089c565b604052919050565b600067ffffffffffffffff8211156109345761093461089c565b5060051b60200190565b600082601f83011261094f57600080fd5b8135602061096461095f8361091a565b6108cb565b82815260059290921b8401810191818101908684111561098357600080fd5b8286015b8481101561099e5780358352918301918301610987565b509695505050505050565b600080604083850312156109bc57600080fd5b823567ffffffffffffffff808211156109d457600080fd5b818501915085601f8301126109e857600080fd5b813560206109f861095f8361091a565b82815260059290921b84018101918181019089841115610a1757600080fd5b948201945b83861015610a5857853573ffffffffffffffffffffffffffffffffffffffff81168114610a495760008081fd5b82529482019490820190610a1c565b96505086013592505080821115610a6e57600080fd5b50610a7b8582860161093e565b9150509250929050565b60008219821115610a9857610a986107bc565b50019056fea2646970667358221220f35c690a3db18c705cd5a10f8aa4777a30c7d70640991ef2f9b59e57725ef38764736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100225760003560e01c80637fbbe46f146100f757600080fd5b366100f2574760005b6001548110156100ee57600061271060026000600185815481106100515761005161078d565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020546100919061ffff16856107eb565b61009b9190610828565b90506100db600183815481106100b3576100b361078d565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1682610119565b50806100e681610863565b91505061002b565b5050005b600080fd5b34801561010357600080fd5b506101176101123660046109a9565b61027d565b005b80471015610188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146101e2576040519150601f19603f3d011682016040523d82523d6000602084013e6101e7565b606091505b5050905080610278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161017f565b505050565b600054610100900460ff1680610296575060005460ff16155b610322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161017f565b600054610100900460ff1615801561036157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b81518351146103cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53706c69747465723a20696e70757473206c656e677468206d69736d61746368604482015260640161017f565b6000835111610437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f53706c69747465723a206e6f2070617965657300000000000000000000000000604482015260640161017f565b6000805b84518110156104b9576104808582815181106104595761045961078d565b60200260200101518583815181106104735761047361078d565b6020026020010151610559565b8381815181106104925761049261078d565b6020026020010151826104a59190610a85565b9150806104b181610863565b91505061043b565b508061271014610525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53686172657320646f6e27742073756d20757020746f20313030303020706273604482015260640161017f565b50801561027857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b73ffffffffffffffffffffffffffffffffffffffff82166105d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53706c69747465723a206163636f756e74206973203078302061646472657373604482015260640161017f565b6000811180156105e7575061271081105b61064d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f53706c69747465723a20696e76616c6964207368617265730000000000000000604482015260640161017f565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205461ffff16156106de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f53706c69747465723a206163636f756e74206475706c69636174656400000000604482015260640161017f565b600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff93909316928317905560009182526002602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610823576108236107bc565b500290565b60008261085e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610895576108956107bc565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156109125761091261089c565b604052919050565b600067ffffffffffffffff8211156109345761093461089c565b5060051b60200190565b600082601f83011261094f57600080fd5b8135602061096461095f8361091a565b6108cb565b82815260059290921b8401810191818101908684111561098357600080fd5b8286015b8481101561099e5780358352918301918301610987565b509695505050505050565b600080604083850312156109bc57600080fd5b823567ffffffffffffffff808211156109d457600080fd5b818501915085601f8301126109e857600080fd5b813560206109f861095f8361091a565b82815260059290921b84018101918181019089841115610a1757600080fd5b948201945b83861015610a5857853573ffffffffffffffffffffffffffffffffffffffff81168114610a495760008081fd5b82529482019490820190610a1c565b96505086013592505080821115610a6e57600080fd5b50610a7b8582860161093e565b9150509250929050565b60008219821115610a9857610a986107bc565b50019056fea2646970667358221220f35c690a3db18c705cd5a10f8aa4777a30c7d70640991ef2f9b59e57725ef38764736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2777,
        "contract": "contracts/PushSplitter.sol:PushSplitter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2780,
        "contract": "contracts/PushSplitter.sol:PushSplitter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4664,
        "contract": "contracts/PushSplitter.sol:PushSplitter",
        "label": "payees",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4668,
        "contract": "contracts/PushSplitter.sol:PushSplitter",
        "label": "shares",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint16)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}