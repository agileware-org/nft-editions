{
  "address": "0x858F8A54C6ad24E3c5876B50E76652ffa4D0b144",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract EditionMetadata",
          "name": "_metadata",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EditionSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "PaymentFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contentHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contentUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contentUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_contentHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_contentType",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "_size",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_royalties",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "holder",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct MintableEditions.Shares[]",
          "name": "_shares",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintEdition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "mintEditions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCanMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royalties",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "allowed",
          "type": "uint16"
        }
      ],
      "name": "setApprovedMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wei",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contentUrl",
          "type": "string"
        }
      ],
      "name": "updateEditionURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a98249f44f4a95b1633d269012ed9f204dd6914a5020bbe94610d8d14ec85b3",
  "receipt": {
    "to": null,
    "from": "0x39bAd0952bf397c891454D4554C8aB3E8e0ea477",
    "contractAddress": "0x858F8A54C6ad24E3c5876B50E76652ffa4D0b144",
    "transactionIndex": 22,
    "gasUsed": "3817426",
    "logsBloom": "0x
    "blockHash": "0x5226fd8322cf6a3048ee91daebafffe57cbdb424f9fa2549ef19c714201780ab",
    "transactionHash": "0x1a98249f44f4a95b1633d269012ed9f204dd6914a5020bbe94610d8d14ec85b3",
    "logs": [],
    "blockNumber": 9747515,
    "cumulativeGasUsed": "9806487",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9a05C39760d6761EA03d4D7E78ABf8AAf6017C2E"
  ],
  "solcInputHash": "bd6f5305145a7de638e1dc334df9438c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract EditionMetadata\",\"name\":\"_metadata\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditionSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PaymentFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_contentType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"_size\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_royalties\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct MintableEditions.Shares[]\",\"name\":\"_shares\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"mintEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberCanMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"allowed\",\"type\":\"uint16\"}],\"name\":\"setApprovedMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contentUrl\",\"type\":\"string\"}],\"name\":\"updateEditionURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"Token ID to burn\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getURI()\":{\"returns\":{\"_0\":\"contentUrl, contentHash\"}},\"initialize(address,string,string,string,string,bytes32,uint8,uint64,uint16,(address,uint16)[])\":{\"params\":{\"_contentHash\":\"SHA256 of the tokens content in bytes32 format (0xHASH)\",\"_contentType\":\"type of tokens content [0=image, 1=animation/video/audio]\",\"_contentUrl\":\"content URL of the edition tokens\",\"_description\":\"description of tokens of this edition\",\"_name\":\"name of editions, used in the title as \\\"$name $tokenId/$size\\\"\",\"_owner\":\"can authorize, mint, gets royalties and a dividend of sales, can update the content URL.\",\"_royalties\":\"perpetual royalties paid to the creator upon token selling\",\"_shares\":\"shares in bps destined to the shareholders (one per each shareholder)\",\"_size\":\"number of NFTs that can be minted from this contract: set to 0 for unbound\",\"_symbol\":\"symbol of the tokens mined by this contract\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintEditions(address[])\":{\"params\":{\"recipients\":\"list of addresses to send the newly minted tokens to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_value\":\"the sale price for this token\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setApprovedMinter(address,uint16)\":{\"params\":{\"allowed\":\"uint16 how many tokens this address is allowed to mint, 0 disables minting\",\"minter\":\"address to set approved minting status for\"}},\"setPrice(uint256)\":{\"params\":{\"_wei\":\"if sale price is 0, no sale is allowed, otherwise the provided amount of WEI is needed to start the sale.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"User burn function for token id. \"},\"getURI()\":{\"notice\":\"Get URI and hash for edition NFT\"},\"initialize(address,string,string,string,string,bytes32,uint8,uint64,uint16,(address,uint16)[])\":{\"notice\":\"Creates a new edition and sets the only allowed minter to the address that creates/owns the edition: this can be re-assigned or updated later. \"},\"mintEdition()\":{\"notice\":\"If caller is listed as an allowed minter, mints one NFT for him.\"},\"mintEditions(address[])\":{\"notice\":\"Mints multiple tokens, one for each of the given list of addresses. Only the edition owner can use this operation and it is intended fo partial giveaways. \"},\"numberCanMint()\":{\"notice\":\"Returns the number of tokens still available for minting (uint64 when open edition)\"},\"owner()\":{\"notice\":\"Simple override for owner interface.\"},\"purchase()\":{\"notice\":\"Basic ETH-based sales operation, performed at the given set price. This operation is open to everyone as soon as the salePrice is set to a non-zero value.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"ERC2981 - Gets royalty information for token\"},\"setApprovedMinter(address,uint16)\":{\"notice\":\"Allows the edition owner to set the amount of tokens (max 65535) an address is allowed to mint.  If the ZeroAddress (address(0x0)) is set as a minter with an allowance greater than 0, anyone will be allowed  to mint any amount of tokens, similarly to setApprovalForAll in the ERC721 spec. If the allowed amount is set to 0 then the address will NOT be allowed to mint. \"},\"setPrice(uint256)\":{\"notice\":\"This operation sets the sale price, thus allowing anyone to acquire a token from this edition at the sale price via the purchase operation. Setting the sale price to 0 prevents purchase of the tokens which is then allowed only to permitted addresses. \"},\"tokenURI(uint256)\":{\"notice\":\"Get URI for given token id \"},\"totalSupply()\":{\"notice\":\"Returns the number of tokens minted so far \"},\"updateEditionURL(string)\":{\"notice\":\"Allows for updates of edition urls by the owner of the edition. Only URLs can be updated (data-uris are supported), hashes cannot be updated.\"},\"withdraw()\":{\"notice\":\"This operation transfers all ETHs from the contract balance to the shareholders.\"},\"withdraw(address)\":{\"notice\":\"This operation attempts to transfer part of the contract balance to the provided shareholder based on its shares and previous witdrawals.\"}},\"notice\":\"This contract allows dynamic NFT minting.  Operations allow for selling publicly, partial or total giveaways, direct giveaways and rewardings.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintableEditions.sol\":\"MintableEditions\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xd8a3c09ad479d297be526fe6945ca29a018178ba04c2f35081a8dda7faedc7c8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xc88de28441ae0fbf215384ecbc12b675f862dcdf851daa5a6943cef4c91e4373\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x49915fbc84c030ba425312356c1a0a28f81cdee5ab637f7a264752b52243fec6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8116b65b11e0a65ad6cf40cf2d71d2dacad80ddc37ad42af965fc919afb19e5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5f8d2e5137f7603eeaa0516e5b40dc6e637f179edea8134f1dbef9754c9baf2b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe0091487bb0da2016b050e276b74e83a3a4fa641f65600558281a3dc3ef24994\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x704add6904e5156bac4fb870ee851af4c2d004ae0cac22fd030162843fd1d611\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/EditionMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\r\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\r\\n * \\r\\n */\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n\\r\\nimport {MetadataHelper} from \\\"./MetadataHelper.sol\\\";\\r\\n\\r\\n/**\\r\\n * Shared NFT logic for rendering metadata associated with editions\\r\\n */\\r\\ncontract EditionMetadata is MetadataHelper {\\r\\n\\r\\n    /**\\r\\n     * Generates edition metadata from storage information as base64-json blob\\r\\n     * Combines the media data and metadata\\r\\n     * \\r\\n     * @param name Name of NFT in metadata\\r\\n     * @param description Description of NFT in metadata\\r\\n     * @param contentUrl URL of image to render for edition\\r\\n     * @param contentType index of the content type to render for edition\\r\\n     * @param tokenOfEdition Token ID for specific token\\r\\n     * @param size Size of entire edition to show\\r\\n     */\\r\\n    function createTokenURI(string memory name, string memory description, string memory contentUrl, uint8 contentType, uint256 tokenOfEdition, uint256 size) external pure returns (string memory) {\\r\\n        string memory _tokenMediaData = tokenMediaData(contentUrl, contentType, tokenOfEdition);\\r\\n        bytes memory json = createMetadata(name, description, _tokenMediaData, tokenOfEdition, size);\\r\\n        return encodeMetadata(json);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * Function to create the metadata json string for the nft edition\\r\\n     * \\r\\n     * @param name Name of NFT in metadata\\r\\n     * @param description Description of NFT in metadata\\r\\n     * @param mediaData Data for media to include in json object\\r\\n     * @param tokenOfEdition Token ID for specific token\\r\\n     * @param size Size of entire edition to show\\r\\n    */\\r\\n    function createMetadata(string memory name, string memory description, string memory mediaData, uint256 tokenOfEdition, uint256 size) public pure returns (bytes memory) {\\r\\n        bytes memory sizeText;\\r\\n        if (size > 0) {\\r\\n            sizeText = abi.encodePacked(\\\"/\\\", numberToString(size));\\r\\n        }\\r\\n        return abi.encodePacked('{\\\"name\\\":\\\"', name, \\\" \\\", numberToString(tokenOfEdition), sizeText, '\\\",\\\"',\\r\\n                'description\\\":\\\"', description, '\\\",\\\"',\\r\\n                mediaData,\\r\\n                'properties\\\":{\\\"number\\\":', numberToString(tokenOfEdition), ',\\\"name\\\":\\\"', name, '\\\"}}'\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * Generates edition metadata from storage information as base64-json blob\\r\\n     * Combines the media data and metadata\\r\\n     * \\r\\n     * @param contentUrl URL of image to render for edition\\r\\n     * @param contentType index of the content type to render for edition\\r\\n     * @param tokenOfEdition token identifier\\r\\n     */\\r\\n    function tokenMediaData(string memory contentUrl, uint8 contentType, uint256 tokenOfEdition) public pure returns (string memory) {\\r\\n        if (contentType == 0) {\\r\\n            return string(abi.encodePacked('image\\\":\\\"', contentUrl, \\\"?id=\\\", numberToString(tokenOfEdition),'\\\",\\\"'));\\r\\n        } else if (contentType == 1) {\\r\\n            return string(abi.encodePacked('animation_url\\\":\\\"', contentUrl, \\\"?id=\\\", numberToString(tokenOfEdition),'\\\",\\\"'));\\r\\n        } else if (contentType == 2) {\\r\\n            return string(abi.encodePacked('youtube_url\\\":\\\"', contentUrl, \\\"?id=\\\", numberToString(tokenOfEdition),'\\\",\\\"'));\\r\\n        }\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1b45538c60d2999cdf6ca38b44d0e11daaa41cbbee654911d90fc26bd0755704\",\"license\":\"MIT\"},\"contracts/IMintableEditions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\r\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\r\\n * \\r\\n */\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IMintableEditions {\\r\\n    /**\\r\\n     * Mints one token for the msg.sender. \\r\\n     */\\r\\n    function mintEdition() external returns (uint256);\\r\\n    \\r\\n    /**\\r\\n     * Mints multiple tokens, one for each of the given list of addresses.\\r\\n     * \\r\\n     * @param to list of addresses to send the newly minted tokens to\\r\\n     */\\r\\n    function mintEditions(address[] memory to) external returns (uint256);\\r\\n\\r\\n    /** \\r\\n     * Returns the number of tokens still available for minting\\r\\n     */\\r\\n    function numberCanMint() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * Returns the owner of the edition.\\r\\n     */\\r\\n    function owner() external view returns (address);\\r\\n}\",\"keccak256\":\"0xa52ca186134343704178615474299246091151c804b4b55f3eee9a952720a778\",\"license\":\"MIT\"},\"contracts/MetadataHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\r\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\r\\n * \\r\\n */\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\r\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\n/**\\r\\n * Shared utility functions for rendering on-chain metadata\\r\\n */\\r\\ncontract MetadataHelper {\\r\\n    /**\\r\\n     * @param unencoded bytes to base64-encode\\r\\n     */\\r\\n    function base64Encode(bytes memory unencoded) public pure returns (string memory) {\\r\\n        return Base64.encode(unencoded);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Encodes the argument json bytes into base64-data uri format\\r\\n     * \\r\\n     * @param json raw json to base64 and turn into a data-uri\\r\\n     */\\r\\n    function encodeMetadata(bytes memory json) public pure returns (string memory) {\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", base64Encode(json)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Proxy to openzeppelin's toString function\\r\\n     *\\r\\n     * @param value number to return as a string\\r\\n     */\\r\\n    function numberToString(uint256 value) public pure returns (string memory) {\\r\\n        return StringsUpgradeable.toString(value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcaf4001037465a9c3d5068f340b85fc956da8c6287a9b3c4f8ad85873cdf409d\",\"license\":\"MIT\"},\"contracts/MintableEditions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\r\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\r\\n * \\r\\n */\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\r\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\r\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./EditionMetadata.sol\\\";\\r\\nimport \\\"./IMintableEditions.sol\\\";\\r\\n\\r\\n/**\\r\\n * This contract allows dynamic NFT minting.\\r\\n * \\r\\n * Operations allow for selling publicly, partial or total giveaways, direct giveaways and rewardings.\\r\\n */\\r\\ncontract MintableEditions is ERC721Upgradeable, IERC2981Upgradeable, IMintableEditions, OwnableUpgradeable {\\r\\n    \\r\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\r\\n    \\r\\n    event PriceChanged(uint256 amount);\\r\\n    event EditionSold(uint256 price, address owner);\\r\\n    event PaymentReleased(address to, uint256 amount);\\r\\n    event PaymentFailed(address to);\\r\\n\\r\\n    struct Shares {\\r\\n        address payable holder;\\r\\n        uint16 bps;\\r\\n    }\\r\\n\\r\\n    // token id counter\\r\\n    CountersUpgradeable.Counter private counter;\\r\\n\\r\\n    // token description\\r\\n    string public description;\\r\\n\\r\\n    // token content URL\\r\\n    string public contentUrl;\\r\\n    // hash for the associated content\\r\\n    bytes32 public contentHash;\\r\\n    // type of content\\r\\n    uint8 internal contentType;\\r\\n    \\r\\n    // the number of editions this contract can mint\\r\\n    uint64 public size;\\r\\n    \\r\\n    // royalties ERC2981 in bps\\r\\n    uint8 internal royaltiesType;\\r\\n    uint16 public royalties;\\r\\n\\r\\n    \\r\\n    // NFT rendering logic\\r\\n    EditionMetadata private immutable metadata;\\r\\n\\r\\n    // addresses allowed to mint editions\\r\\n    mapping(address => uint16) internal allowedMinters;\\r\\n\\r\\n    // price for sale\\r\\n    uint256 public price;\\r\\n\\r\\n    address[] private shareholders;\\r\\n    mapping(address => uint16) public shares;\\r\\n    mapping(address => uint256) private witdrawals;\\r\\n    // balance withdrawn so far\\r\\n    uint256 private withdrawn;\\r\\n\\r\\n    constructor(EditionMetadata _metadata) initializer {\\r\\n        metadata = _metadata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Creates a new edition and sets the only allowed minter to the address that creates/owns the edition: this can be re-assigned or updated later.\\r\\n     * \\r\\n     * @param _owner can authorize, mint, gets royalties and a dividend of sales, can update the content URL.\\r\\n     * @param _name name of editions, used in the title as \\\"$name $tokenId/$size\\\"\\r\\n     * @param _symbol symbol of the tokens mined by this contract\\r\\n     * @param _description description of tokens of this edition\\r\\n     * @param _contentUrl content URL of the edition tokens\\r\\n     * @param _contentHash SHA256 of the tokens content in bytes32 format (0xHASH)\\r\\n     * @param _contentType type of tokens content [0=image, 1=animation/video/audio]\\r\\n     * @param _size number of NFTs that can be minted from this contract: set to 0 for unbound\\r\\n     * @param _royalties perpetual royalties paid to the creator upon token selling\\r\\n     * @param _shares shares in bps destined to the shareholders (one per each shareholder)\\r\\n     */\\r\\n    function initialize(\\r\\n        address _owner,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        string memory _description,\\r\\n        string memory _contentUrl,\\r\\n        bytes32 _contentHash,\\r\\n        uint8 _contentType,\\r\\n        uint64 _size,\\r\\n        uint16 _royalties,\\r\\n        Shares[] memory _shares\\r\\n    ) public initializer {\\r\\n        __ERC721_init(_name, _symbol);\\r\\n        __Ownable_init();\\r\\n\\r\\n        transferOwnership(_owner); // set ownership\\r\\n        description = _description;\\r\\n        contentUrl = _contentUrl;\\r\\n        contentHash = _contentHash;\\r\\n        contentType = _contentType;\\r\\n        size = _size;\\r\\n        counter.increment(); // token ids start at 1\\r\\n\\r\\n        require(_royalties < 10_000, \\\"Royalties too high\\\");\\r\\n        royalties = _royalties;\\r\\n        \\r\\n        uint16 _totalShares;\\r\\n        for (uint256 i = 0; i < _shares.length; i++) {\\r\\n            _addPayee(_shares[i].holder, _shares[i].bps);\\r\\n            _totalShares += _shares[i].bps;\\r\\n        }\\r\\n        require(_totalShares < 10_000, \\\"Shares too high\\\");\\r\\n        _addPayee(payable(_owner), 10_000 - _totalShares);\\r\\n    }\\r\\n\\r\\n    function _addPayee(address payable _account, uint16 _shares) internal {\\r\\n        require(_account != address(0), \\\"Shareholder is zero address\\\");\\r\\n        require(_shares > 0 && _shares <= 10_000, \\\"Shares are invalid\\\");\\r\\n        require(shares[_account] == 0, \\\"Shareholder already has shares\\\");\\r\\n\\r\\n        shareholders.push(_account);\\r\\n        shares[_account] = _shares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens minted so far \\r\\n     */\\r\\n     function totalSupply() public view returns (uint256) {\\r\\n        return counter.current() - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Basic ETH-based sales operation, performed at the given set price.\\r\\n     * This operation is open to everyone as soon as the salePrice is set to a non-zero value.\\r\\n     */\\r\\n    function purchase() external payable returns (uint256) {\\r\\n        require(price > 0, \\\"Not for sale\\\");\\r\\n        require(msg.value == price, \\\"Wrong price\\\");\\r\\n        address[] memory toMint = new address[](1);\\r\\n        toMint[0] = msg.sender;\\r\\n        emit EditionSold(price, msg.sender);\\r\\n        return _mintEditions(toMint);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This operation sets the sale price, thus allowing anyone to acquire a token from this edition at the sale price via the purchase operation.\\r\\n     * Setting the sale price to 0 prevents purchase of the tokens which is then allowed only to permitted addresses.\\r\\n     * \\r\\n     * @param _wei if sale price is 0, no sale is allowed, otherwise the provided amount of WEI is needed to start the sale.\\r\\n     */\\r\\n    function setPrice(uint256 _wei) external onlyOwner {\\r\\n        price = _wei;\\r\\n        emit PriceChanged(price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This operation transfers all ETHs from the contract balance to the shareholders.\\r\\n     */\\r\\n    function withdraw() external {\\r\\n        for (uint i = 0; i < shareholders.length; i++) {\\r\\n            try this.withdraw(payable(shareholders[i])) returns (uint256 payment) {\\r\\n                emit PaymentReleased(shareholders[i], payment);\\r\\n            } catch {\\r\\n                emit PaymentFailed(shareholders[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This operation attempts to transfer part of the contract balance to the provided shareholder based on its shares and previous witdrawals.\\r\\n     */\\r\\n    function withdraw(address payable _account) external returns (uint256) {\\r\\n        uint256 _totalReceived = address(this).balance + withdrawn;\\r\\n        uint256 _amount = (_totalReceived * shares[_account]) / 10_000 - witdrawals[_account];\\r\\n        require(_amount != 0, \\\"Account is not due payment\\\");\\r\\n        witdrawals[_account] += _amount;\\r\\n        withdrawn += _amount;\\r\\n        AddressUpgradeable.sendValue(_account, _amount);\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Internal: checks if the msg.sender is allowed to mint.\\r\\n     */\\r\\n    function _isAllowedToMint() internal view returns (bool) {\\r\\n        return (owner() == msg.sender) || _isPublicAllowed() || (allowedMinters[msg.sender] > 0);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Internal: checks if the ZeroAddress is allowed to mint.\\r\\n     */\\r\\n    function _isPublicAllowed() internal view returns (bool) {\\r\\n        return (allowedMinters[address(0x0)] > 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * If caller is listed as an allowed minter, mints one NFT for him.\\r\\n     */\\r\\n    function mintEdition() external override returns (uint256) {\\r\\n        require(_isAllowedToMint(), \\\"Minting not allowed\\\");\\r\\n        address[] memory toMint = new address[](1);\\r\\n        toMint[0] = msg.sender;\\r\\n        if (owner() != msg.sender && !_isPublicAllowed()) {\\r\\n            allowedMinters[msg.sender] = --allowedMinters[msg.sender];\\r\\n        }\\r\\n        return _mintEditions(toMint);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Mints multiple tokens, one for each of the given list of addresses.\\r\\n     * Only the edition owner can use this operation and it is intended fo partial giveaways.\\r\\n     * \\r\\n     * @param recipients list of addresses to send the newly minted tokens to\\r\\n     */\\r\\n    function mintEditions(address[] memory recipients) external onlyOwner override returns (uint256) {\\r\\n        return _mintEditions(recipients);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Simple override for owner interface.\\r\\n     */\\r\\n    function owner() public view override(OwnableUpgradeable, IMintableEditions) returns (address) {\\r\\n        return super.owner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allows the edition owner to set the amount of tokens (max 65535) an address is allowed to mint.\\r\\n     * \\r\\n     * If the ZeroAddress (address(0x0)) is set as a minter with an allowance greater than 0, anyone will be allowed \\r\\n     * to mint any amount of tokens, similarly to setApprovalForAll in the ERC721 spec.\\r\\n     * If the allowed amount is set to 0 then the address will NOT be allowed to mint.\\r\\n     * \\r\\n     * @param minter address to set approved minting status for\\r\\n     * @param allowed uint16 how many tokens this address is allowed to mint, 0 disables minting\\r\\n     */\\r\\n    function setApprovedMinter(address minter, uint16 allowed) public onlyOwner {\\r\\n        allowedMinters[minter] = allowed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allows for updates of edition urls by the owner of the edition.\\r\\n     * Only URLs can be updated (data-uris are supported), hashes cannot be updated.\\r\\n     */\\r\\n    function updateEditionURL(string memory _contentUrl) public onlyOwner {\\r\\n        contentUrl = _contentUrl;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * Returns the number of tokens still available for minting (uint64 when open edition)\\r\\n     */\\r\\n    function numberCanMint() public view override returns (uint256) {\\r\\n        // atEditionId is one-indexed hence the need to remove one here\\r\\n        return size + 1 - counter.current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * User burn function for token id.\\r\\n     * \\r\\n     *  @param tokenId Token ID to burn\\r\\n     */\\r\\n    function burn(uint256 tokenId) public {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Private function to mint without any access checks.\\r\\n     * Called by the public edition minting functions.\\r\\n     */\\r\\n    function _mintEditions(address[] memory recipients) internal returns (uint256) {\\r\\n        uint64 startAt = uint64(counter.current());\\r\\n        uint64 endAt = uint64(startAt + recipients.length - 1);\\r\\n        require(size == 0 || endAt <= size, \\\"Sold out\\\");\\r\\n        while (counter.current() <= endAt) {\\r\\n            _mint(recipients[counter.current() - startAt], counter.current());\\r\\n            counter.increment();\\r\\n        }\\r\\n        return counter.current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get URI and hash for edition NFT\\r\\n     * @return contentUrl, contentHash\\r\\n     */\\r\\n    function getURI() public view returns (string memory, bytes32) {\\r\\n        return (contentUrl, contentHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get URI for given token id\\r\\n     * \\r\\n     * @param tokenId token id to get uri for\\r\\n     * @return base64-encoded json metadata object\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"No token\\\");\\r\\n        return metadata.createTokenURI(name(), description, contentUrl, contentType, tokenId, size);\\r\\n    }\\r\\n    \\r\\n     /**\\r\\n      * ERC2981 - Gets royalty information for token\\r\\n      * @param _value the sale price for this token\\r\\n      */\\r\\n    function royaltyInfo(uint256, uint256 _value) external view override returns (address receiver, uint256 royaltyAmount) {\\r\\n        if (owner() == address(0x0)) {\\r\\n            return (owner(), 0);\\r\\n        }\\r\\n        return (owner(), (_value * royalties) / 10_000);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721Upgradeable, IERC165Upgradeable) returns (bool) {\\r\\n        return type(IERC2981Upgradeable).interfaceId == interfaceId || ERC721Upgradeable.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7962d4a4067480c8c9cd15c77b4a75813267cd8cf9380cc1fff452dd1de6fa04\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200457238038062004572833981016040819052620000349162000106565b600054610100900460ff16806200004e575060005460ff16155b620000b65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000d9576000805461ffff19166101011790555b6001600160601b0319606083901b166080528015620000fe576000805461ff00191690555b505062000138565b6000602082840312156200011957600080fd5b81516001600160a01b03811681146200013157600080fd5b9392505050565b60805160601c61441b620001576000396000611e33015261441b6000f3fe60806040526004361061026a5760003560e01c8063715018a611610153578063a035b1fe116100cb578063c87b56dd1161007f578063e985e9c511610064578063e985e9c5146106de578063f053dc5c14610734578063f2fde38b1461075d57600080fd5b8063c87b56dd1461067a578063ce7c2ac21461069a57600080fd5b8063b88d4fde116100b0578063b88d4fde14610625578063bb84ef5314610645578063c04eba3c1461065a57600080fd5b8063a035b1fe146105ef578063a22cb4651461060557600080fd5b8063850710c31161012257806391b7f5ed1161010757806391b7f5ed1461057b578063949d225d1461059b57806395d89b41146105da57600080fd5b8063850710c3146105515780638da5cb5b1461056657600080fd5b8063715018a6146104e45780637284e416146104f95780637754305c1461050e5780637acc12f71461053157600080fd5b80633ccfd60b116101e657806352992626116101b5578063646c2e331161019a578063646c2e33146104a657806364edfbf0146104bc57806370a08231146104c457600080fd5b806352992626146104665780636352211e1461048657600080fd5b80633ccfd60b146103f157806342842e0e1461040657806342966c681461042657806351cff8d91461044657600080fd5b80630b65b6e71161023d57806318160ddd1161022257806318160ddd1461037057806323b872dd146103855780632a55205a146103a557600080fd5b80630b65b6e71461032d5780630f6a93491461035057600080fd5b806301ffc9a71461026f57806306fdde03146102a4578063081812fc146102c6578063095ea7b31461030b575b600080fd5b34801561027b57600080fd5b5061028f61028a366004613ce0565b61077d565b60405190151581526020015b60405180910390f35b3480156102b057600080fd5b506102b96107d9565b60405161029b9190613f84565b3480156102d257600080fd5b506102e66102e1366004613dc6565b61086b565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161029b565b34801561031757600080fd5b5061032b610326366004613c13565b61094a565b005b34801561033957600080fd5b50610342610ad7565b60405190815260200161029b565b34801561035c57600080fd5b5061034261036b366004613c3f565b610b18565b34801561037c57600080fd5b50610342610bae565b34801561039157600080fd5b5061032b6103a03660046139ca565b610bc5565b3480156103b157600080fd5b506103c56103c0366004613df8565b610c67565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091520161029b565b3480156103fd57600080fd5b5061032b610ce3565b34801561041257600080fd5b5061032b6104213660046139ca565b610ed4565b34801561043257600080fd5b5061032b610441366004613dc6565b610eef565b34801561045257600080fd5b50610342610461366004613974565b610f67565b34801561047257600080fd5b5061032b610481366004613bde565b6110a2565b34801561049257600080fd5b506102e66104a1366004613dc6565b611181565b3480156104b257600080fd5b5061034260cc5481565b610342611233565b3480156104d057600080fd5b506103426104df366004613974565b6113b1565b3480156104f057600080fd5b5061032b61147f565b34801561050557600080fd5b506102b9611511565b34801561051a57600080fd5b5061052361159f565b60405161029b929190613f97565b34801561053d57600080fd5b5061032b61054c366004613d1a565b61163c565b34801561055d57600080fd5b506102b96116d9565b34801561057257600080fd5b506102e66116e6565b34801561058757600080fd5b5061032b610596366004613dc6565b611707565b3480156105a757600080fd5b5060cd546105c190610100900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161029b565b3480156105e657600080fd5b506102b96117c8565b3480156105fb57600080fd5b5061034260cf5481565b34801561061157600080fd5b5061032b610620366004613a8b565b6117d7565b34801561063157600080fd5b5061032b610640366004613a0b565b6117e2565b34801561065157600080fd5b5061034261188a565b34801561066657600080fd5b5061032b610675366004613abe565b611a30565b34801561068657600080fd5b506102b9610695366004613dc6565b611da3565b3480156106a657600080fd5b506106cb6106b5366004613974565b60d16020526000908152604090205461ffff1681565b60405161ffff909116815260200161029b565b3480156106ea57600080fd5b5061028f6106f9366004613991565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152606a6020908152604080832093909416825291909152205460ff1690565b34801561074057600080fd5b5060cd546106cb906a0100000000000000000000900461ffff1681565b34801561076957600080fd5b5061032b610778366004613974565b611f40565b60007f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806107d357506107d382612072565b92915050565b6060606580546107e89061427b565b80601f01602080910402602001604051908101604052809291908181526020018280546108149061427b565b80156108615780601f1061083657610100808354040283529160200191610861565b820191906000526020600020905b81548152906001019060200180831161084457829003601f168201915b5050505050905090565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16610921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526069602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b600061095582611181565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610918565b3373ffffffffffffffffffffffffffffffffffffffff82161480610a3c5750610a3c81336106f9565b610ac8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610918565b610ad28383612155565b505050565b6000610ae260c95490565b60cd54610aff90610100900467ffffffffffffffff16600161413e565b67ffffffffffffffff16610b1391906141fc565b905090565b600033610b236116e6565b73ffffffffffffffffffffffffffffffffffffffff1614610ba0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610918565b6107d3826121f5565b919050565b60006001610bbb60c95490565b610b1391906141fc565b610bd0335b82612344565b610c5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610918565b610ad28383836124b0565b60008080610c736116e6565b73ffffffffffffffffffffffffffffffffffffffff161415610ca257610c976116e6565b600091509150610cdc565b610caa6116e6565b60cd5461271090610ccd906a0100000000000000000000900461ffff168661419c565b610cd79190614161565b915091505b9250929050565b60005b60d054811015610ed1573073ffffffffffffffffffffffffffffffffffffffff166351cff8d960d08381548110610d1f57610d1f614337565b60009182526020909120015460405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381600087803b158015610d9157600080fd5b505af1925050508015610ddf575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610ddc91810190613ddf565b60015b610e4f577f36899e48161ee4504f5f89aa55f7aed73460d464cb62f64e03057df7dbcdd0aa60d08281548110610e1757610e17614337565b6000918252602091829020015460405173ffffffffffffffffffffffffffffffffffffffff90911681520160405180910390a1610ebf565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b05660d08381548110610e8357610e83614337565b600091825260209182902001546040805173ffffffffffffffffffffffffffffffffffffffff90921682529181018490520160405180910390a1505b80610ec9816142cf565b915050610ce6565b50565b610ad2838383604051806020016040528060008152506117e2565b610ef833610bca565b610f5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420617070726f76656400000000000000000000000000000000000000006044820152606401610918565b610ed181612717565b60008060d35447610f789190614126565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260d2602090815260408083205460d1909252822054929350909161271090610fc09061ffff168561419c565b610fca9190614161565b610fd491906141fc565b90508061103d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4163636f756e74206973206e6f7420647565207061796d656e740000000000006044820152606401610918565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260d2602052604081208054839290611072908490614126565b925050819055508060d3600082825461108b9190614126565b9091555061109b905084826127e4565b9392505050565b336110ab6116e6565b73ffffffffffffffffffffffffffffffffffffffff1614611128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610918565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260ce6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16806107d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610918565b60008060cf54116112a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420666f722073616c6500000000000000000000000000000000000000006044820152606401610918565b60cf54341461130b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f57726f6e672070726963650000000000000000000000000000000000000000006044820152606401610918565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061134157611341614337565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910182015260cf546040805191825233928201929092527f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a16113ab816121f5565b91505090565b600073ffffffffffffffffffffffffffffffffffffffff8216611456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610918565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526068602052604090205490565b336114886116e6565b73ffffffffffffffffffffffffffffffffffffffff1614611505576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610918565b61150f600061293e565b565b60ca805461151e9061427b565b80601f016020809104026020016040519081016040528092919081815260200182805461154a9061427b565b80156115975780601f1061156c57610100808354040283529160200191611597565b820191906000526020600020905b81548152906001019060200180831161157a57829003601f168201915b505050505081565b6060600060cb60cc548180546115b49061427b565b80601f01602080910402602001604051908101604052809291908181526020018280546115e09061427b565b801561162d5780601f106116025761010080835404028352916020019161162d565b820191906000526020600020905b81548152906001019060200180831161161057829003601f168201915b50505050509150915091509091565b336116456116e6565b73ffffffffffffffffffffffffffffffffffffffff16146116c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610918565b80516116d59060cb906020840190613795565b5050565b60cb805461151e9061427b565b6000610b1360975473ffffffffffffffffffffffffffffffffffffffff1690565b336117106116e6565b73ffffffffffffffffffffffffffffffffffffffff161461178d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610918565b60cf8190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6229060200160405180910390a150565b6060606680546107e89061427b565b6116d53383836129b5565b6117ec3383612344565b611878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610918565b61188484848484612ae3565b50505050565b6000611894612b86565b6118fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d696e74696e67206e6f7420616c6c6f776564000000000000000000000000006044820152606401610918565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061193057611930614337565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101523361195e6116e6565b73ffffffffffffffffffffffffffffffffffffffff16141580156119ae57506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff16155b15611a275733600090815260ce6020526040812080549091906119d49061ffff1661423f565b825461ffff9182166101009390930a838102920219161790915533600090815260ce6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001690911790555b6113ab816121f5565b600054610100900460ff1680611a49575060005460ff16155b611ad5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610918565b600054610100900460ff16158015611b1457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b611b1e8a8a612c00565b611b26612d31565b611b2f8b611f40565b8751611b429060ca9060208b0190613795565b508651611b569060cb9060208a0190613795565b5060cc86905560cd805467ffffffffffffffff8616610100027fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000090911660ff881617179055611ba960c980546001019055565b6127108361ffff1610611c18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f526f79616c7469657320746f6f206869676800000000000000000000000000006044820152606401610918565b60cd80547fffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffffff166a010000000000000000000061ffff8616021790556000805b8351811015611ce157611ca4848281518110611c7557611c75614337565b602002602001015160000151858381518110611c9357611c93614337565b602002602001015160200151612e56565b838181518110611cb657611cb6614337565b60200260200101516020015182611ccd9190614100565b915080611cd9816142cf565b915050611c57565b506127108161ffff1610611d51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f53686172657320746f6f206869676800000000000000000000000000000000006044820152606401610918565b611d668c611d61836127106141d9565b612e56565b508015611d9657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050505050505050565b60008181526067602052604090205460609073ffffffffffffffffffffffffffffffffffffffff16611e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f20746f6b656e0000000000000000000000000000000000000000000000006044820152606401610918565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663647a0857611e756107d9565b60cd5460405160e084901b7fffffffff00000000000000000000000000000000000000000000000000000000168152611ece929160ca9160cb9160ff8116918a91610100900467ffffffffffffffff1690600401613fb9565b60006040518083038186803b158015611ee657600080fd5b505afa158015611efa573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107d39190810190613d4f565b33611f496116e6565b73ffffffffffffffffffffffffffffffffffffffff1614611fc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610918565b73ffffffffffffffffffffffffffffffffffffffff8116612069576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610918565b610ed18161293e565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061210557507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806107d357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146107d3565b600081815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906121af82611181565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061220160c95490565b90506000600184518367ffffffffffffffff1661221e9190614126565b61222891906141fc565b60cd54909150610100900467ffffffffffffffff16158061225e575060cd5467ffffffffffffffff610100909104811690821611155b6122c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f536f6c64206f75740000000000000000000000000000000000000000000000006044820152606401610918565b8067ffffffffffffffff166122d860c95490565b1161233857612325848367ffffffffffffffff166122f560c95490565b6122ff91906141fc565b8151811061230f5761230f614337565b602002602001015161232060c95490565b613094565b61233360c980546001019055565b6122c4565b60c9545b949350505050565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff166123f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610918565b600061240083611181565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061246f57508373ffffffffffffffffffffffffffffffffffffffff166124578461086b565b73ffffffffffffffffffffffffffffffffffffffff16145b8061233c575073ffffffffffffffffffffffffffffffffffffffff8082166000908152606a602090815260408083209388168352929052205460ff1661233c565b8273ffffffffffffffffffffffffffffffffffffffff166124d082611181565b73ffffffffffffffffffffffffffffffffffffffff1614612573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610918565b73ffffffffffffffffffffffffffffffffffffffff8216612615576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610918565b612620600082612155565b73ffffffffffffffffffffffffffffffffffffffff831660009081526068602052604081208054600192906126569084906141fc565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260408120805460019290612691908490614126565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061272282611181565b905061272f600083612155565b73ffffffffffffffffffffffffffffffffffffffff811660009081526068602052604081208054600192906127659084906141fc565b909155505060008281526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b8047101561284e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610918565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146128a8576040519150601f19603f3d011682016040523d82523d6000602084013e6128ad565b606091505b5050905080610ad2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610918565b6097805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612a4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610918565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152606a602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612aee8484846124b0565b612afa84848484613256565b611884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610918565b600033612b916116e6565b73ffffffffffffffffffffffffffffffffffffffff161480612be057506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff1615155b80610b1357505033600090815260ce602052604090205461ffff16151590565b600054610100900460ff1680612c19575060005460ff16155b612ca5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610918565b600054610100900460ff16158015612ce457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612cec613455565b612cf4613455565b612cfe8383613569565b8015610ad257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b600054610100900460ff1680612d4a575060005460ff16155b612dd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610918565b600054610100900460ff16158015612e1557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612e1d613455565b612e256136a8565b8015610ed157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b73ffffffffffffffffffffffffffffffffffffffff8216612ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5368617265686f6c646572206973207a65726f206164647265737300000000006044820152606401610918565b60008161ffff16118015612eed57506127108161ffff1611155b612f53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5368617265732061726520696e76616c696400000000000000000000000000006044820152606401610918565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d1602052604090205461ffff1615612fe4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5368617265686f6c64657220616c7265616479206861732073686172657300006044820152606401610918565b60d08054600181019091557fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff939093169283179055600091825260d1602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff8216613111576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610918565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff161561319d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610918565b73ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604081208054600192906131d3908490614126565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600073ffffffffffffffffffffffffffffffffffffffff84163b1561344a576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a02906132cd903390899088908890600401613f3b565b602060405180830381600087803b1580156132e757600080fd5b505af1925050508015613335575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261333291810190613cfd565b60015b6133ff573d808015613363576040519150601f19603f3d011682016040523d82523d6000602084013e613368565b606091505b5080516133f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610918565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061233c565b506001949350505050565b600054610100900460ff168061346e575060005460ff16155b6134fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610918565b600054610100900460ff16158015612e2557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790558015610ed157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff1680613582575060005460ff16155b61360e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610918565b600054610100900460ff1615801561364d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b8251613660906065906020860190613795565b508151613674906066906020850190613795565b508015610ad257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b600054610100900460ff16806136c1575060005460ff16155b61374d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610918565b600054610100900460ff1615801561378c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612e253361293e565b8280546137a19061427b565b90600052602060002090601f0160209004810192826137c35760008555613809565b82601f106137dc57805160ff1916838001178555613809565b82800160010185558215613809579182015b828111156138095782518255916020019190600101906137ee565b50613815929150613819565b5090565b5b80821115613815576000815560010161381a565b600061384161383c846140ba565b614047565b905082815283838301111561385557600080fd5b828260208301376000602084830101529392505050565b8035610ba981614395565b600082601f83011261388857600080fd5b8135602061389861383c83614096565b80838252828201915082860187848660061b89010111156138b857600080fd5b6000805b8681101561390b57604080848c0312156138d4578283fd5b6138dc61401e565b84356138e781614395565b81526138f4858901613939565b8189015286529486019492909201916001016138bc565b509198975050505050505050565b600082601f83011261392a57600080fd5b61109b8383356020850161382e565b803561ffff81168114610ba957600080fd5b803567ffffffffffffffff81168114610ba957600080fd5b803560ff81168114610ba957600080fd5b60006020828403121561398657600080fd5b813561109b81614395565b600080604083850312156139a457600080fd5b82356139af81614395565b915060208301356139bf81614395565b809150509250929050565b6000806000606084860312156139df57600080fd5b83356139ea81614395565b925060208401356139fa81614395565b929592945050506040919091013590565b60008060008060808587031215613a2157600080fd5b8435613a2c81614395565b93506020850135613a3c81614395565b925060408501359150606085013567ffffffffffffffff811115613a5f57600080fd5b8501601f81018713613a7057600080fd5b613a7f8782356020840161382e565b91505092959194509250565b60008060408385031215613a9e57600080fd5b8235613aa981614395565b9150602083013580151581146139bf57600080fd5b6000806000806000806000806000806101408b8d031215613ade57600080fd5b613ae78b61386c565b995060208b013567ffffffffffffffff80821115613b0457600080fd5b613b108e838f01613919565b9a5060408d0135915080821115613b2657600080fd5b613b328e838f01613919565b995060608d0135915080821115613b4857600080fd5b613b548e838f01613919565b985060808d0135915080821115613b6a57600080fd5b613b768e838f01613919565b975060a08d01359650613b8b60c08e01613963565b9550613b9960e08e0161394b565b9450613ba86101008e01613939565b93506101208d0135915080821115613bbf57600080fd5b50613bcc8d828e01613877565b9150509295989b9194979a5092959850565b60008060408385031215613bf157600080fd5b8235613bfc81614395565b9150613c0a60208401613939565b90509250929050565b60008060408385031215613c2657600080fd5b8235613c3181614395565b946020939093013593505050565b60006020808385031215613c5257600080fd5b823567ffffffffffffffff811115613c6957600080fd5b8301601f81018513613c7a57600080fd5b8035613c8861383c82614096565b80828252848201915084840188868560051b8701011115613ca857600080fd5b600094505b83851015613cd4578035613cc081614395565b835260019490940193918501918501613cad565b50979650505050505050565b600060208284031215613cf257600080fd5b813561109b816143b7565b600060208284031215613d0f57600080fd5b815161109b816143b7565b600060208284031215613d2c57600080fd5b813567ffffffffffffffff811115613d4357600080fd5b61233c84828501613919565b600060208284031215613d6157600080fd5b815167ffffffffffffffff811115613d7857600080fd5b8201601f81018413613d8957600080fd5b8051613d9761383c826140ba565b818152856020838501011115613dac57600080fd5b613dbd826020830160208601614213565b95945050505050565b600060208284031215613dd857600080fd5b5035919050565b600060208284031215613df157600080fd5b5051919050565b60008060408385031215613e0b57600080fd5b50508035926020909101359150565b60008151808452613e32816020860160208601614213565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8054600090600181811c9080831680613e7e57607f831692505b6020808410821415613eb9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b83885260208801828015613ed45760018114613f0357613f2e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00871682528282019750613f2e565b60008981526020902060005b87811015613f2857815484820152908601908401613f0f565b83019850505b5050505050505092915050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152613f7a6080830184613e1a565b9695505050505050565b60208152600061109b6020830184613e1a565b604081526000613faa6040830185613e1a565b90508260208301529392505050565b60c081526000613fcc60c0830189613e1a565b8281036020840152613fde8189613e64565b90508281036040840152613ff28188613e64565b60ff9690961660608401525050608081019290925267ffffffffffffffff1660a0909101529392505050565b6040805190810167ffffffffffffffff8111828210171561404157614041614366565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561408e5761408e614366565b604052919050565b600067ffffffffffffffff8211156140b0576140b0614366565b5060051b60200190565b600067ffffffffffffffff8211156140d4576140d4614366565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600061ffff80831681851680830382111561411d5761411d614308565b01949350505050565b6000821982111561413957614139614308565b500190565b600067ffffffffffffffff80831681851680830382111561411d5761411d614308565b600082614197577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156141d4576141d4614308565b500290565b600061ffff838116908316818110156141f4576141f4614308565b039392505050565b60008282101561420e5761420e614308565b500390565b60005b8381101561422e578181015183820152602001614216565b838111156118845750506000910152565b600061ffff82168061425357614253614308565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600181811c9082168061428f57607f821691505b602082108114156142c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561430157614301614308565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610ed157600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610ed157600080fdfea26469706673582212208935226ca1de45946478558e78340e3d567a9c4e28d09c34012f491b27ce411e64736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061026a5760003560e01c8063715018a611610153578063a035b1fe116100cb578063c87b56dd1161007f578063e985e9c511610064578063e985e9c5146106de578063f053dc5c14610734578063f2fde38b1461075d57600080fd5b8063c87b56dd1461067a578063ce7c2ac21461069a57600080fd5b8063b88d4fde116100b0578063b88d4fde14610625578063bb84ef5314610645578063c04eba3c1461065a57600080fd5b8063a035b1fe146105ef578063a22cb4651461060557600080fd5b8063850710c31161012257806391b7f5ed1161010757806391b7f5ed1461057b578063949d225d1461059b57806395d89b41146105da57600080fd5b8063850710c3146105515780638da5cb5b1461056657600080fd5b8063715018a6146104e45780637284e416146104f95780637754305c1461050e5780637acc12f71461053157600080fd5b80633ccfd60b116101e657806352992626116101b5578063646c2e331161019a578063646c2e33146104a657806364edfbf0146104bc57806370a08231146104c457600080fd5b806352992626146104665780636352211e1461048657600080fd5b80633ccfd60b146103f157806342842e0e1461040657806342966c681461042657806351cff8d91461044657600080fd5b80630b65b6e71161023d57806318160ddd1161022257806318160ddd1461037057806323b872dd146103855780632a55205a146103a557600080fd5b80630b65b6e71461032d5780630f6a93491461035057600080fd5b806301ffc9a71461026f57806306fdde03146102a4578063081812fc146102c6578063095ea7b31461030b575b600080fd5b34801561027b57600080fd5b5061028f61028a366004613ce0565b61077d565b60405190151581526020015b60405180910390f35b3480156102b057600080fd5b506102b96107d9565b60405161029b9190613f84565b3480156102d257600080fd5b506102e66102e1366004613dc6565b61086b565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161029b565b34801561031757600080fd5b5061032b610326366004613c13565b61094a565b005b34801561033957600080fd5b50610342610ad7565b60405190815260200161029b565b34801561035c57600080fd5b5061034261036b366004613c3f565b610b18565b34801561037c57600080fd5b50610342610bae565b34801561039157600080fd5b5061032b6103a03660046139ca565b610bc5565b3480156103b157600080fd5b506103c56103c0366004613df8565b610c67565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091520161029b565b3480156103fd57600080fd5b5061032b610ce3565b34801561041257600080fd5b5061032b6104213660046139ca565b610ed4565b34801561043257600080fd5b5061032b610441366004613dc6565b610eef565b34801561045257600080fd5b50610342610461366004613974565b610f67565b34801561047257600080fd5b5061032b610481366004613bde565b6110a2565b34801561049257600080fd5b506102e66104a1366004613dc6565b611181565b3480156104b257600080fd5b5061034260cc5481565b610342611233565b3480156104d057600080fd5b506103426104df366004613974565b6113b1565b3480156104f057600080fd5b5061032b61147f565b34801561050557600080fd5b506102b9611511565b34801561051a57600080fd5b5061052361159f565b60405161029b929190613f97565b34801561053d57600080fd5b5061032b61054c366004613d1a565b61163c565b34801561055d57600080fd5b506102b96116d9565b34801561057257600080fd5b506102e66116e6565b34801561058757600080fd5b5061032b610596366004613dc6565b611707565b3480156105a757600080fd5b5060cd546105c190610100900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161029b565b3480156105e657600080fd5b506102b96117c8565b3480156105fb57600080fd5b5061034260cf5481565b34801561061157600080fd5b5061032b610620366004613a8b565b6117d7565b34801561063157600080fd5b5061032b610640366004613a0b565b6117e2565b34801561065157600080fd5b5061034261188a565b34801561066657600080fd5b5061032b610675366004613abe565b611a30565b34801561068657600080fd5b506102b9610695366004613dc6565b611da3565b3480156106a657600080fd5b506106cb6106b5366004613974565b60d16020526000908152604090205461ffff1681565b60405161ffff909116815260200161029b565b3480156106ea57600080fd5b5061028f6106f9366004613991565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152606a6020908152604080832093909416825291909152205460ff1690565b34801561074057600080fd5b5060cd546106cb906a0100000000000000000000900461ffff1681565b34801561076957600080fd5b5061032b610778366004613974565b611f40565b60007f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806107d357506107d382612072565b92915050565b6060606580546107e89061427b565b80601f01602080910402602001604051908101604052809291908181526020018280546108149061427b565b80156108615780601f1061083657610100808354040283529160200191610861565b820191906000526020600020905b81548152906001019060200180831161084457829003601f168201915b5050505050905090565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16610921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526069602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b600061095582611181565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610918565b3373ffffffffffffffffffffffffffffffffffffffff82161480610a3c5750610a3c81336106f9565b610ac8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610918565b610ad28383612155565b505050565b6000610ae260c95490565b60cd54610aff90610100900467ffffffffffffffff16600161413e565b67ffffffffffffffff16610b1391906141fc565b905090565b600033610b236116e6565b73ffffffffffffffffffffffffffffffffffffffff1614610ba0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610918565b6107d3826121f5565b919050565b60006001610bbb60c95490565b610b1391906141fc565b610bd0335b82612344565b610c5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610918565b610ad28383836124b0565b60008080610c736116e6565b73ffffffffffffffffffffffffffffffffffffffff161415610ca257610c976116e6565b600091509150610cdc565b610caa6116e6565b60cd5461271090610ccd906a0100000000000000000000900461ffff168661419c565b610cd79190614161565b915091505b9250929050565b60005b60d054811015610ed1573073ffffffffffffffffffffffffffffffffffffffff166351cff8d960d08381548110610d1f57610d1f614337565b60009182526020909120015460405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381600087803b158015610d9157600080fd5b505af1925050508015610ddf575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610ddc91810190613ddf565b60015b610e4f577f36899e48161ee4504f5f89aa55f7aed73460d464cb62f64e03057df7dbcdd0aa60d08281548110610e1757610e17614337565b6000918252602091829020015460405173ffffffffffffffffffffffffffffffffffffffff90911681520160405180910390a1610ebf565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b05660d08381548110610e8357610e83614337565b600091825260209182902001546040805173ffffffffffffffffffffffffffffffffffffffff90921682529181018490520160405180910390a1505b80610ec9816142cf565b915050610ce6565b50565b610ad2838383604051806020016040528060008152506117e2565b610ef833610bca565b610f5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420617070726f76656400000000000000000000000000000000000000006044820152606401610918565b610ed181612717565b60008060d35447610f789190614126565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260d2602090815260408083205460d1909252822054929350909161271090610fc09061ffff168561419c565b610fca9190614161565b610fd491906141fc565b90508061103d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4163636f756e74206973206e6f7420647565207061796d656e740000000000006044820152606401610918565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260d2602052604081208054839290611072908490614126565b925050819055508060d3600082825461108b9190614126565b9091555061109b905084826127e4565b9392505050565b336110ab6116e6565b73ffffffffffffffffffffffffffffffffffffffff1614611128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610918565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260ce6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16806107d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610918565b60008060cf54116112a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420666f722073616c6500000000000000000000000000000000000000006044820152606401610918565b60cf54341461130b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f57726f6e672070726963650000000000000000000000000000000000000000006044820152606401610918565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061134157611341614337565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910182015260cf546040805191825233928201929092527f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a16113ab816121f5565b91505090565b600073ffffffffffffffffffffffffffffffffffffffff8216611456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610918565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526068602052604090205490565b336114886116e6565b73ffffffffffffffffffffffffffffffffffffffff1614611505576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610918565b61150f600061293e565b565b60ca805461151e9061427b565b80601f016020809104026020016040519081016040528092919081815260200182805461154a9061427b565b80156115975780601f1061156c57610100808354040283529160200191611597565b820191906000526020600020905b81548152906001019060200180831161157a57829003601f168201915b505050505081565b6060600060cb60cc548180546115b49061427b565b80601f01602080910402602001604051908101604052809291908181526020018280546115e09061427b565b801561162d5780601f106116025761010080835404028352916020019161162d565b820191906000526020600020905b81548152906001019060200180831161161057829003601f168201915b50505050509150915091509091565b336116456116e6565b73ffffffffffffffffffffffffffffffffffffffff16146116c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610918565b80516116d59060cb906020840190613795565b5050565b60cb805461151e9061427b565b6000610b1360975473ffffffffffffffffffffffffffffffffffffffff1690565b336117106116e6565b73ffffffffffffffffffffffffffffffffffffffff161461178d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610918565b60cf8190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6229060200160405180910390a150565b6060606680546107e89061427b565b6116d53383836129b5565b6117ec3383612344565b611878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610918565b61188484848484612ae3565b50505050565b6000611894612b86565b6118fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d696e74696e67206e6f7420616c6c6f776564000000000000000000000000006044820152606401610918565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061193057611930614337565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101523361195e6116e6565b73ffffffffffffffffffffffffffffffffffffffff16141580156119ae57506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff16155b15611a275733600090815260ce6020526040812080549091906119d49061ffff1661423f565b825461ffff9182166101009390930a838102920219161790915533600090815260ce6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001690911790555b6113ab816121f5565b600054610100900460ff1680611a49575060005460ff16155b611ad5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610918565b600054610100900460ff16158015611b1457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b611b1e8a8a612c00565b611b26612d31565b611b2f8b611f40565b8751611b429060ca9060208b0190613795565b508651611b569060cb9060208a0190613795565b5060cc86905560cd805467ffffffffffffffff8616610100027fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000090911660ff881617179055611ba960c980546001019055565b6127108361ffff1610611c18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f526f79616c7469657320746f6f206869676800000000000000000000000000006044820152606401610918565b60cd80547fffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffffff166a010000000000000000000061ffff8616021790556000805b8351811015611ce157611ca4848281518110611c7557611c75614337565b602002602001015160000151858381518110611c9357611c93614337565b602002602001015160200151612e56565b838181518110611cb657611cb6614337565b60200260200101516020015182611ccd9190614100565b915080611cd9816142cf565b915050611c57565b506127108161ffff1610611d51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f53686172657320746f6f206869676800000000000000000000000000000000006044820152606401610918565b611d668c611d61836127106141d9565b612e56565b508015611d9657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050505050505050565b60008181526067602052604090205460609073ffffffffffffffffffffffffffffffffffffffff16611e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f20746f6b656e0000000000000000000000000000000000000000000000006044820152606401610918565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663647a0857611e756107d9565b60cd5460405160e084901b7fffffffff00000000000000000000000000000000000000000000000000000000168152611ece929160ca9160cb9160ff8116918a91610100900467ffffffffffffffff1690600401613fb9565b60006040518083038186803b158015611ee657600080fd5b505afa158015611efa573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107d39190810190613d4f565b33611f496116e6565b73ffffffffffffffffffffffffffffffffffffffff1614611fc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610918565b73ffffffffffffffffffffffffffffffffffffffff8116612069576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610918565b610ed18161293e565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061210557507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806107d357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146107d3565b600081815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906121af82611181565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061220160c95490565b90506000600184518367ffffffffffffffff1661221e9190614126565b61222891906141fc565b60cd54909150610100900467ffffffffffffffff16158061225e575060cd5467ffffffffffffffff610100909104811690821611155b6122c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f536f6c64206f75740000000000000000000000000000000000000000000000006044820152606401610918565b8067ffffffffffffffff166122d860c95490565b1161233857612325848367ffffffffffffffff166122f560c95490565b6122ff91906141fc565b8151811061230f5761230f614337565b602002602001015161232060c95490565b613094565b61233360c980546001019055565b6122c4565b60c9545b949350505050565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff166123f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610918565b600061240083611181565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061246f57508373ffffffffffffffffffffffffffffffffffffffff166124578461086b565b73ffffffffffffffffffffffffffffffffffffffff16145b8061233c575073ffffffffffffffffffffffffffffffffffffffff8082166000908152606a602090815260408083209388168352929052205460ff1661233c565b8273ffffffffffffffffffffffffffffffffffffffff166124d082611181565b73ffffffffffffffffffffffffffffffffffffffff1614612573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610918565b73ffffffffffffffffffffffffffffffffffffffff8216612615576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610918565b612620600082612155565b73ffffffffffffffffffffffffffffffffffffffff831660009081526068602052604081208054600192906126569084906141fc565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260408120805460019290612691908490614126565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061272282611181565b905061272f600083612155565b73ffffffffffffffffffffffffffffffffffffffff811660009081526068602052604081208054600192906127659084906141fc565b909155505060008281526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b8047101561284e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610918565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146128a8576040519150601f19603f3d011682016040523d82523d6000602084013e6128ad565b606091505b5050905080610ad2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610918565b6097805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612a4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610918565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152606a602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612aee8484846124b0565b612afa84848484613256565b611884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610918565b600033612b916116e6565b73ffffffffffffffffffffffffffffffffffffffff161480612be057506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff1615155b80610b1357505033600090815260ce602052604090205461ffff16151590565b600054610100900460ff1680612c19575060005460ff16155b612ca5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610918565b600054610100900460ff16158015612ce457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612cec613455565b612cf4613455565b612cfe8383613569565b8015610ad257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b600054610100900460ff1680612d4a575060005460ff16155b612dd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610918565b600054610100900460ff16158015612e1557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612e1d613455565b612e256136a8565b8015610ed157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b73ffffffffffffffffffffffffffffffffffffffff8216612ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5368617265686f6c646572206973207a65726f206164647265737300000000006044820152606401610918565b60008161ffff16118015612eed57506127108161ffff1611155b612f53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5368617265732061726520696e76616c696400000000000000000000000000006044820152606401610918565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d1602052604090205461ffff1615612fe4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5368617265686f6c64657220616c7265616479206861732073686172657300006044820152606401610918565b60d08054600181019091557fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff939093169283179055600091825260d1602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff8216613111576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610918565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff161561319d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610918565b73ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604081208054600192906131d3908490614126565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600073ffffffffffffffffffffffffffffffffffffffff84163b1561344a576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a02906132cd903390899088908890600401613f3b565b602060405180830381600087803b1580156132e757600080fd5b505af1925050508015613335575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261333291810190613cfd565b60015b6133ff573d808015613363576040519150601f19603f3d011682016040523d82523d6000602084013e613368565b606091505b5080516133f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610918565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061233c565b506001949350505050565b600054610100900460ff168061346e575060005460ff16155b6134fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610918565b600054610100900460ff16158015612e2557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790558015610ed157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff1680613582575060005460ff16155b61360e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610918565b600054610100900460ff1615801561364d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b8251613660906065906020860190613795565b508151613674906066906020850190613795565b508015610ad257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b600054610100900460ff16806136c1575060005460ff16155b61374d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610918565b600054610100900460ff1615801561378c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612e253361293e565b8280546137a19061427b565b90600052602060002090601f0160209004810192826137c35760008555613809565b82601f106137dc57805160ff1916838001178555613809565b82800160010185558215613809579182015b828111156138095782518255916020019190600101906137ee565b50613815929150613819565b5090565b5b80821115613815576000815560010161381a565b600061384161383c846140ba565b614047565b905082815283838301111561385557600080fd5b828260208301376000602084830101529392505050565b8035610ba981614395565b600082601f83011261388857600080fd5b8135602061389861383c83614096565b80838252828201915082860187848660061b89010111156138b857600080fd5b6000805b8681101561390b57604080848c0312156138d4578283fd5b6138dc61401e565b84356138e781614395565b81526138f4858901613939565b8189015286529486019492909201916001016138bc565b509198975050505050505050565b600082601f83011261392a57600080fd5b61109b8383356020850161382e565b803561ffff81168114610ba957600080fd5b803567ffffffffffffffff81168114610ba957600080fd5b803560ff81168114610ba957600080fd5b60006020828403121561398657600080fd5b813561109b81614395565b600080604083850312156139a457600080fd5b82356139af81614395565b915060208301356139bf81614395565b809150509250929050565b6000806000606084860312156139df57600080fd5b83356139ea81614395565b925060208401356139fa81614395565b929592945050506040919091013590565b60008060008060808587031215613a2157600080fd5b8435613a2c81614395565b93506020850135613a3c81614395565b925060408501359150606085013567ffffffffffffffff811115613a5f57600080fd5b8501601f81018713613a7057600080fd5b613a7f8782356020840161382e565b91505092959194509250565b60008060408385031215613a9e57600080fd5b8235613aa981614395565b9150602083013580151581146139bf57600080fd5b6000806000806000806000806000806101408b8d031215613ade57600080fd5b613ae78b61386c565b995060208b013567ffffffffffffffff80821115613b0457600080fd5b613b108e838f01613919565b9a5060408d0135915080821115613b2657600080fd5b613b328e838f01613919565b995060608d0135915080821115613b4857600080fd5b613b548e838f01613919565b985060808d0135915080821115613b6a57600080fd5b613b768e838f01613919565b975060a08d01359650613b8b60c08e01613963565b9550613b9960e08e0161394b565b9450613ba86101008e01613939565b93506101208d0135915080821115613bbf57600080fd5b50613bcc8d828e01613877565b9150509295989b9194979a5092959850565b60008060408385031215613bf157600080fd5b8235613bfc81614395565b9150613c0a60208401613939565b90509250929050565b60008060408385031215613c2657600080fd5b8235613c3181614395565b946020939093013593505050565b60006020808385031215613c5257600080fd5b823567ffffffffffffffff811115613c6957600080fd5b8301601f81018513613c7a57600080fd5b8035613c8861383c82614096565b80828252848201915084840188868560051b8701011115613ca857600080fd5b600094505b83851015613cd4578035613cc081614395565b835260019490940193918501918501613cad565b50979650505050505050565b600060208284031215613cf257600080fd5b813561109b816143b7565b600060208284031215613d0f57600080fd5b815161109b816143b7565b600060208284031215613d2c57600080fd5b813567ffffffffffffffff811115613d4357600080fd5b61233c84828501613919565b600060208284031215613d6157600080fd5b815167ffffffffffffffff811115613d7857600080fd5b8201601f81018413613d8957600080fd5b8051613d9761383c826140ba565b818152856020838501011115613dac57600080fd5b613dbd826020830160208601614213565b95945050505050565b600060208284031215613dd857600080fd5b5035919050565b600060208284031215613df157600080fd5b5051919050565b60008060408385031215613e0b57600080fd5b50508035926020909101359150565b60008151808452613e32816020860160208601614213565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8054600090600181811c9080831680613e7e57607f831692505b6020808410821415613eb9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b83885260208801828015613ed45760018114613f0357613f2e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00871682528282019750613f2e565b60008981526020902060005b87811015613f2857815484820152908601908401613f0f565b83019850505b5050505050505092915050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152613f7a6080830184613e1a565b9695505050505050565b60208152600061109b6020830184613e1a565b604081526000613faa6040830185613e1a565b90508260208301529392505050565b60c081526000613fcc60c0830189613e1a565b8281036020840152613fde8189613e64565b90508281036040840152613ff28188613e64565b60ff9690961660608401525050608081019290925267ffffffffffffffff1660a0909101529392505050565b6040805190810167ffffffffffffffff8111828210171561404157614041614366565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561408e5761408e614366565b604052919050565b600067ffffffffffffffff8211156140b0576140b0614366565b5060051b60200190565b600067ffffffffffffffff8211156140d4576140d4614366565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600061ffff80831681851680830382111561411d5761411d614308565b01949350505050565b6000821982111561413957614139614308565b500190565b600067ffffffffffffffff80831681851680830382111561411d5761411d614308565b600082614197577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156141d4576141d4614308565b500290565b600061ffff838116908316818110156141f4576141f4614308565b039392505050565b60008282101561420e5761420e614308565b500390565b60005b8381101561422e578181015183820152602001614216565b838111156118845750506000910152565b600061ffff82168061425357614253614308565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600181811c9082168061428f57607f821691505b602082108114156142c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561430157614301614308565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610ed157600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610ed157600080fdfea26469706673582212208935226ca1de45946478558e78340e3d567a9c4e28d09c34012f491b27ce411e64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "tokenId": "Token ID to burn"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getURI()": {
        "returns": {
          "_0": "contentUrl, contentHash"
        }
      },
      "initialize(address,string,string,string,string,bytes32,uint8,uint64,uint16,(address,uint16)[])": {
        "params": {
          "_contentHash": "SHA256 of the tokens content in bytes32 format (0xHASH)",
          "_contentType": "type of tokens content [0=image, 1=animation/video/audio]",
          "_contentUrl": "content URL of the edition tokens",
          "_description": "description of tokens of this edition",
          "_name": "name of editions, used in the title as \"$name $tokenId/$size\"",
          "_owner": "can authorize, mint, gets royalties and a dividend of sales, can update the content URL.",
          "_royalties": "perpetual royalties paid to the creator upon token selling",
          "_shares": "shares in bps destined to the shareholders (one per each shareholder)",
          "_size": "number of NFTs that can be minted from this contract: set to 0 for unbound",
          "_symbol": "symbol of the tokens mined by this contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintEditions(address[])": {
        "params": {
          "recipients": "list of addresses to send the newly minted tokens to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_value": "the sale price for this token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setApprovedMinter(address,uint16)": {
        "params": {
          "allowed": "uint16 how many tokens this address is allowed to mint, 0 disables minting",
          "minter": "address to set approved minting status for"
        }
      },
      "setPrice(uint256)": {
        "params": {
          "_wei": "if sale price is 0, no sale is allowed, otherwise the provided amount of WEI is needed to start the sale."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "User burn function for token id. "
      },
      "getURI()": {
        "notice": "Get URI and hash for edition NFT"
      },
      "initialize(address,string,string,string,string,bytes32,uint8,uint64,uint16,(address,uint16)[])": {
        "notice": "Creates a new edition and sets the only allowed minter to the address that creates/owns the edition: this can be re-assigned or updated later. "
      },
      "mintEdition()": {
        "notice": "If caller is listed as an allowed minter, mints one NFT for him."
      },
      "mintEditions(address[])": {
        "notice": "Mints multiple tokens, one for each of the given list of addresses. Only the edition owner can use this operation and it is intended fo partial giveaways. "
      },
      "numberCanMint()": {
        "notice": "Returns the number of tokens still available for minting (uint64 when open edition)"
      },
      "owner()": {
        "notice": "Simple override for owner interface."
      },
      "purchase()": {
        "notice": "Basic ETH-based sales operation, performed at the given set price. This operation is open to everyone as soon as the salePrice is set to a non-zero value."
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "ERC2981 - Gets royalty information for token"
      },
      "setApprovedMinter(address,uint16)": {
        "notice": "Allows the edition owner to set the amount of tokens (max 65535) an address is allowed to mint.  If the ZeroAddress (address(0x0)) is set as a minter with an allowance greater than 0, anyone will be allowed  to mint any amount of tokens, similarly to setApprovalForAll in the ERC721 spec. If the allowed amount is set to 0 then the address will NOT be allowed to mint. "
      },
      "setPrice(uint256)": {
        "notice": "This operation sets the sale price, thus allowing anyone to acquire a token from this edition at the sale price via the purchase operation. Setting the sale price to 0 prevents purchase of the tokens which is then allowed only to permitted addresses. "
      },
      "tokenURI(uint256)": {
        "notice": "Get URI for given token id "
      },
      "totalSupply()": {
        "notice": "Returns the number of tokens minted so far "
      },
      "updateEditionURL(string)": {
        "notice": "Allows for updates of edition urls by the owner of the edition. Only URLs can be updated (data-uris are supported), hashes cannot be updated."
      },
      "withdraw()": {
        "notice": "This operation transfers all ETHs from the contract balance to the shareholders."
      },
      "withdraw(address)": {
        "notice": "This operation attempts to transfer part of the contract balance to the provided shareholder based on its shares and previous witdrawals."
      }
    },
    "notice": "This contract allows dynamic NFT minting.  Operations allow for selling publicly, partial or total giveaways, direct giveaways and rewardings.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 703,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 706,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2355,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2678,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1074,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1076,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1080,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1084,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1088,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1094,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1905,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 124,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3139,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "counter",
        "offset": 0,
        "slot": "201",
        "type": "t_struct(Counter)2362_storage"
      },
      {
        "astId": 3141,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "description",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 3143,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "contentUrl",
        "offset": 0,
        "slot": "203",
        "type": "t_string_storage"
      },
      {
        "astId": 3145,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "contentHash",
        "offset": 0,
        "slot": "204",
        "type": "t_bytes32"
      },
      {
        "astId": 3147,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "contentType",
        "offset": 0,
        "slot": "205",
        "type": "t_uint8"
      },
      {
        "astId": 3149,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "size",
        "offset": 1,
        "slot": "205",
        "type": "t_uint64"
      },
      {
        "astId": 3151,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "royaltiesType",
        "offset": 9,
        "slot": "205",
        "type": "t_uint8"
      },
      {
        "astId": 3153,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "royalties",
        "offset": 10,
        "slot": "205",
        "type": "t_uint16"
      },
      {
        "astId": 3160,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "allowedMinters",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 3162,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "price",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 3165,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "shareholders",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3169,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "shares",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 3173,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "witdrawals",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3175,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "withdrawn",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2362_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 2361,
            "contract": "contracts/MintableEditions.sol:MintableEditions",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}