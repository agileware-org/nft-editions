{
  "address": "0x3e9434606A403D8479539c5DCf53E660f0808168",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "unencoded",
          "type": "bytes"
        }
      ],
      "name": "base64Encode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mediaData",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "createMetadata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contentUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "thumbnailUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "createTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "encodeMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "numberToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contentUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "thumbnailUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        }
      ],
      "name": "tokenMediaData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdcab7afc476d4ff7a6f046ee49ea1ad302769428c056362ddc4466292300a2b",
  "receipt": {
    "to": null,
    "from": "0xDEE48aB42ceEb910c8C61a8966A57Dcf3E8B6706",
    "contractAddress": "0x3e9434606A403D8479539c5DCf53E660f0808168",
    "transactionIndex": 11,
    "gasUsed": "872339",
    "logsBloom": "0x
    "blockHash": "0xf3d46f033ed4ed88b535361e894eb9d8c3486d4f6113c5048707c2310c4dd64a",
    "transactionHash": "0xcdcab7afc476d4ff7a6f046ee49ea1ad302769428c056362ddc4466292300a2b",
    "logs": [],
    "blockNumber": 9792860,
    "cumulativeGasUsed": "2735334",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "428cafc9f551af7203e2717098d53cb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unencoded\",\"type\":\"bytes\"}],\"name\":\"base64Encode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mediaData\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"createMetadata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thumbnailUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"createTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"encodeMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"numberToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contentUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thumbnailUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"}],\"name\":\"tokenMediaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"base64Encode(bytes)\":{\"params\":{\"unencoded\":\"bytes to base64-encode\"}},\"createMetadata(string,string,string,uint256,uint256)\":{\"params\":{\"description\":\"Description of NFT in metadata\",\"mediaData\":\"Data for media to include in json object\",\"name\":\"Name of NFT in metadata\",\"size\":\"Size of entire edition to show\",\"tokenOfEdition\":\"Token ID for specific token\"}},\"createTokenURI(string,string,string,string,uint256,uint256)\":{\"params\":{\"contentUrl\":\"URL of content to render\",\"description\":\"Description of NFT in metadata\",\"name\":\"Name of NFT in metadata\",\"size\":\"total count of editions\",\"thumbnailUrl\":\"optional URL of a thumbnail to render, for animated content only\",\"tokenOfEdition\":\"unique identifier of a token edition\"}},\"encodeMetadata(bytes)\":{\"params\":{\"json\":\"raw json to base64 and turn into a data-uri\"}},\"numberToString(uint256)\":{\"params\":{\"value\":\"number to return as a string\"}},\"tokenMediaData(string,string,uint256)\":{\"params\":{\"contentUrl\":\"URL of image to render for edition\",\"thumbnailUrl\":\"index of the content type to render for edition\",\"tokenOfEdition\":\"token identifier\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createMetadata(string,string,string,uint256,uint256)\":{\"notice\":\"Function to create the metadata json string for the nft edition \"},\"createTokenURI(string,string,string,string,uint256,uint256)\":{\"notice\":\"Generates edition metadata from storage information as base64-json blob Combines the media data and metadata \"},\"encodeMetadata(bytes)\":{\"notice\":\"Encodes the argument json bytes into base64-data uri format \"},\"numberToString(uint256)\":{\"notice\":\"Proxy to openzeppelin's toString function\"},\"tokenMediaData(string,string,uint256)\":{\"notice\":\"Generates edition metadata from storage information as base64-json blob Combines the media data and metadata \"}},\"notice\":\"Shared NFT logic for rendering metadata associated with editions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EditionsMetadataHelper.sol\":\"EditionsMetadataHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/EditionsMetadataHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\r\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by www.Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n\\r\\nimport {MetadataHelper} from \\\"./MetadataHelper.sol\\\";\\r\\n\\r\\n/**\\r\\n * Shared NFT logic for rendering metadata associated with editions\\r\\n */\\r\\ncontract EditionsMetadataHelper is MetadataHelper {\\r\\n\\r\\n    /**\\r\\n     * Generates edition metadata from storage information as base64-json blob\\r\\n     * Combines the media data and metadata\\r\\n     * \\r\\n     * @param name Name of NFT in metadata\\r\\n     * @param description Description of NFT in metadata\\r\\n     * @param contentUrl URL of content to render\\r\\n     * @param thumbnailUrl optional URL of a thumbnail to render, for animated content only\\r\\n     * @param tokenOfEdition unique identifier of a token edition\\r\\n     * @param size total count of editions\\r\\n     */\\r\\n    function createTokenURI(string memory name, string memory description, string memory contentUrl, string memory thumbnailUrl, uint256 tokenOfEdition, uint256 size) external pure returns (string memory) {\\r\\n        string memory _tokenMediaData = tokenMediaData(contentUrl, thumbnailUrl, tokenOfEdition);\\r\\n        bytes memory json = createMetadata(name, description, _tokenMediaData, tokenOfEdition, size);\\r\\n        return encodeMetadata(json);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * Function to create the metadata json string for the nft edition\\r\\n     * \\r\\n     * @param name Name of NFT in metadata\\r\\n     * @param description Description of NFT in metadata\\r\\n     * @param mediaData Data for media to include in json object\\r\\n     * @param tokenOfEdition Token ID for specific token\\r\\n     * @param size Size of entire edition to show\\r\\n    */\\r\\n    function createMetadata(string memory name, string memory description, string memory mediaData, uint256 tokenOfEdition, uint256 size) public pure returns (bytes memory) {\\r\\n        bytes memory sizeText;\\r\\n        if (size > 0) {\\r\\n            sizeText = abi.encodePacked(\\\"/\\\", numberToString(size));\\r\\n        }\\r\\n        return abi.encodePacked('{\\\"name\\\":\\\"', name, \\\" \\\", numberToString(tokenOfEdition), sizeText, '\\\",\\\"description\\\":\\\"', description, '\\\",\\\"',\\r\\n                mediaData, 'properties\\\":{\\\"number\\\":', numberToString(tokenOfEdition), ',\\\"name\\\":\\\"', name, '\\\"}}');\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * Generates edition metadata from storage information as base64-json blob\\r\\n     * Combines the media data and metadata\\r\\n     * \\r\\n     * @param contentUrl URL of image to render for edition\\r\\n     * @param thumbnailUrl index of the content type to render for edition\\r\\n     * @param tokenOfEdition token identifier\\r\\n     */\\r\\n    function tokenMediaData(string memory contentUrl, string memory thumbnailUrl, uint256 tokenOfEdition) public pure returns (string memory) {\\r\\n        if (bytes(thumbnailUrl).length == 0) {\\r\\n            return string(\\r\\n                abi.encodePacked(\\r\\n                    'image\\\":\\\"', contentUrl, \\\"?id=\\\", numberToString(tokenOfEdition),'\\\",\\\"'));\\r\\n        } else {\\r\\n            return string(\\r\\n                abi.encodePacked(\\r\\n                    'image\\\":\\\"', thumbnailUrl, \\\"?id=\\\", numberToString(tokenOfEdition),'\\\",\\\"animation_url\\\":\\\"', contentUrl, \\\"?id=\\\", numberToString(tokenOfEdition),'\\\",\\\"'));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9ece5f26f318dab30dde5f3e1d831f164a27b4e05ac3989dfd57054fe1328a8d\",\"license\":\"MIT\"},\"contracts/MetadataHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\r\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by www.Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\r\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\n/**\\r\\n * Shared utility functions for rendering on-chain metadata\\r\\n */\\r\\ncontract MetadataHelper {\\r\\n    /**\\r\\n     * @param unencoded bytes to base64-encode\\r\\n     */\\r\\n    function base64Encode(bytes memory unencoded) public pure returns (string memory) {\\r\\n        return Base64.encode(unencoded);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Encodes the argument json bytes into base64-data uri format\\r\\n     * \\r\\n     * @param json raw json to base64 and turn into a data-uri\\r\\n     */\\r\\n    function encodeMetadata(bytes memory json) public pure returns (string memory) {\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", base64Encode(json)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Proxy to openzeppelin's toString function\\r\\n     *\\r\\n     * @param value number to return as a string\\r\\n     */\\r\\n    function numberToString(uint256 value) public pure returns (string memory) {\\r\\n        return StringsUpgradeable.toString(value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9e18346aa25e94b7b47fe7c31ce1ef4ca46e975f3ca05d1bcfe18b7dc86690ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ef1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063be6ce8b411610050578063be6ce8b4146100c6578063d5fb1b19146100d9578063eb111ab6146100ec57600080fd5b8063170dc6601461007757806329395d7e146100a0578063a50e6a68146100b3575b600080fd5b61008a61008536600461057e565b6100ff565b6040516100979190610611565b60405180910390f35b61008a6100ae3660046106e7565b610110565b61008a6100c1366004610750565b610141565b61008a6100d436600461080f565b610179565b61008a6100e73660046106e7565b6101f5565b61008a6100fa3660046108a9565b610200565b606061010a8261026b565b92915050565b606061011b826101f5565b60405160200161012b9190610932565b6040516020818303038152906040529050919050565b60606000610150868686610200565b905060006101618989848888610179565b905061016c81610110565b9998505050505050505050565b60608082156101ad5761018b836100ff565b60405160200161019b9190610977565b60405160208183030381529060405290505b866101b7856100ff565b8288886101c3896100ff565b8c6040516020016101da97969594939291906109bc565b60405160208183030381529060405291505095945050505050565b606061010a826103a5565b606082516000141561023d5783610216836100ff565b604051602001610227929190610b6e565b6040516020818303038152906040529050610264565b82610247836100ff565b85610251856100ff565b6040516020016102279493929190610c19565b9392505050565b6060816102ab57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156102d557806102bf81610d50565b91506102ce9050600a83610db8565b91506102af565b60008167ffffffffffffffff8111156102f0576102f0610624565b6040519080825280601f01601f19166020018201604052801561031a576020820181803683370190505b5090505b841561039d5761032f600183610dcc565b915061033c600a86610de3565b610347906030610df7565b60f81b81838151811061035c5761035c610e0f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610396600a86610db8565b945061031e565b949350505050565b60608151600014156103c557505060408051602081019091526000815290565b6000604051806060016040528060408152602001610e7c60409139905060006003845160026103f49190610df7565b6103fe9190610db8565b610409906004610e3e565b90506000610418826020610df7565b67ffffffffffffffff81111561043057610430610624565b6040519080825280601f01601f19166020018201604052801561045a576020820181803683370190505b509050818152600183018586518101602084015b818310156104c6576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161046e565b6003895106600181146104e0576002811461052a57610570565b7f3d3d0000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe830152610570565b7f3d000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301525b509398975050505050505050565b60006020828403121561059057600080fd5b5035919050565b60005b838110156105b257818101518382015260200161059a565b838111156105c1576000848401525b50505050565b600081518084526105df816020860160208601610597565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061026460208301846105c7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff8084111561066e5761066e610624565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156106b4576106b4610624565b816040528093508581528686860111156106cd57600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156106f957600080fd5b813567ffffffffffffffff81111561071057600080fd5b8201601f8101841361072157600080fd5b61039d84823560208401610653565b600082601f83011261074157600080fd5b61026483833560208501610653565b60008060008060008060c0878903121561076957600080fd5b863567ffffffffffffffff8082111561078157600080fd5b61078d8a838b01610730565b975060208901359150808211156107a357600080fd5b6107af8a838b01610730565b965060408901359150808211156107c557600080fd5b6107d18a838b01610730565b955060608901359150808211156107e757600080fd5b506107f489828a01610730565b9350506080870135915060a087013590509295509295509295565b600080600080600060a0868803121561082757600080fd5b853567ffffffffffffffff8082111561083f57600080fd5b61084b89838a01610730565b9650602088013591508082111561086157600080fd5b61086d89838a01610730565b9550604088013591508082111561088357600080fd5b5061089088828901610730565b9598949750949560608101359550608001359392505050565b6000806000606084860312156108be57600080fd5b833567ffffffffffffffff808211156108d657600080fd5b6108e287838801610730565b945060208601359150808211156108f857600080fd5b5061090586828701610730565b925050604084013590509250925092565b60008151610928818560208601610597565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161096a81601d850160208701610597565b91909101601d0192915050565b7f2f000000000000000000000000000000000000000000000000000000000000008152600082516109af816001850160208701610597565b9190910160010192915050565b7f7b226e616d65223a2200000000000000000000000000000000000000000000008152600088516109f4816009850160208d01610597565b7f20000000000000000000000000000000000000000000000000000000000000006009918401918201528851610a3181600a840160208d01610597565b8851910190610a4781600a840160208c01610597565b7f222c226465736372697074696f6e223a22000000000000000000000000000000600a92909101918201528651610a8581601b840160208b01610597565b7f222c220000000000000000000000000000000000000000000000000000000000601b92909101918201528551610ac381601e840160208a01610597565b610b5f610b36610b30610b07610b01601e868801017f70726f70657274696573223a7b226e756d626572223a00000000000000000000815260160190565b8a610916565b7f2c226e616d65223a220000000000000000000000000000000000000000000000815260090190565b87610916565b7f227d7d0000000000000000000000000000000000000000000000000000000000815260030190565b9b9a5050505050505050505050565b7f696d616765223a22000000000000000000000000000000000000000000000000815260008351610ba6816008850160208801610597565b7f3f69643d000000000000000000000000000000000000000000000000000000006008918401918201528351610be381600c840160208801610597565b7f222c220000000000000000000000000000000000000000000000000000000000600c9290910191820152600f01949350505050565b7f696d616765223a22000000000000000000000000000000000000000000000000815260008551610c51816008850160208a01610597565b80830190507f3f69643d000000000000000000000000000000000000000000000000000000008060088301528651610c9081600c850160208b01610597565b7f222c22616e696d6174696f6e5f75726c223a2200000000000000000000000000600c93909101928301528551610cce81601f850160208a01610597565b601f9201918201528351610ce9816023840160208801610597565b7f222c220000000000000000000000000000000000000000000000000000000000602392909101918201526026019695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d8257610d82610d21565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610dc757610dc7610d89565b500490565b600082821015610dde57610dde610d21565b500390565b600082610df257610df2610d89565b500690565b60008219821115610e0a57610e0a610d21565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e7657610e76610d21565b50029056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122049dbc126e94e318004307bb4947c8c93f032324de4a0521560d07d365580484164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063be6ce8b411610050578063be6ce8b4146100c6578063d5fb1b19146100d9578063eb111ab6146100ec57600080fd5b8063170dc6601461007757806329395d7e146100a0578063a50e6a68146100b3575b600080fd5b61008a61008536600461057e565b6100ff565b6040516100979190610611565b60405180910390f35b61008a6100ae3660046106e7565b610110565b61008a6100c1366004610750565b610141565b61008a6100d436600461080f565b610179565b61008a6100e73660046106e7565b6101f5565b61008a6100fa3660046108a9565b610200565b606061010a8261026b565b92915050565b606061011b826101f5565b60405160200161012b9190610932565b6040516020818303038152906040529050919050565b60606000610150868686610200565b905060006101618989848888610179565b905061016c81610110565b9998505050505050505050565b60608082156101ad5761018b836100ff565b60405160200161019b9190610977565b60405160208183030381529060405290505b866101b7856100ff565b8288886101c3896100ff565b8c6040516020016101da97969594939291906109bc565b60405160208183030381529060405291505095945050505050565b606061010a826103a5565b606082516000141561023d5783610216836100ff565b604051602001610227929190610b6e565b6040516020818303038152906040529050610264565b82610247836100ff565b85610251856100ff565b6040516020016102279493929190610c19565b9392505050565b6060816102ab57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156102d557806102bf81610d50565b91506102ce9050600a83610db8565b91506102af565b60008167ffffffffffffffff8111156102f0576102f0610624565b6040519080825280601f01601f19166020018201604052801561031a576020820181803683370190505b5090505b841561039d5761032f600183610dcc565b915061033c600a86610de3565b610347906030610df7565b60f81b81838151811061035c5761035c610e0f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610396600a86610db8565b945061031e565b949350505050565b60608151600014156103c557505060408051602081019091526000815290565b6000604051806060016040528060408152602001610e7c60409139905060006003845160026103f49190610df7565b6103fe9190610db8565b610409906004610e3e565b90506000610418826020610df7565b67ffffffffffffffff81111561043057610430610624565b6040519080825280601f01601f19166020018201604052801561045a576020820181803683370190505b509050818152600183018586518101602084015b818310156104c6576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161046e565b6003895106600181146104e0576002811461052a57610570565b7f3d3d0000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe830152610570565b7f3d000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301525b509398975050505050505050565b60006020828403121561059057600080fd5b5035919050565b60005b838110156105b257818101518382015260200161059a565b838111156105c1576000848401525b50505050565b600081518084526105df816020860160208601610597565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061026460208301846105c7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff8084111561066e5761066e610624565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156106b4576106b4610624565b816040528093508581528686860111156106cd57600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156106f957600080fd5b813567ffffffffffffffff81111561071057600080fd5b8201601f8101841361072157600080fd5b61039d84823560208401610653565b600082601f83011261074157600080fd5b61026483833560208501610653565b60008060008060008060c0878903121561076957600080fd5b863567ffffffffffffffff8082111561078157600080fd5b61078d8a838b01610730565b975060208901359150808211156107a357600080fd5b6107af8a838b01610730565b965060408901359150808211156107c557600080fd5b6107d18a838b01610730565b955060608901359150808211156107e757600080fd5b506107f489828a01610730565b9350506080870135915060a087013590509295509295509295565b600080600080600060a0868803121561082757600080fd5b853567ffffffffffffffff8082111561083f57600080fd5b61084b89838a01610730565b9650602088013591508082111561086157600080fd5b61086d89838a01610730565b9550604088013591508082111561088357600080fd5b5061089088828901610730565b9598949750949560608101359550608001359392505050565b6000806000606084860312156108be57600080fd5b833567ffffffffffffffff808211156108d657600080fd5b6108e287838801610730565b945060208601359150808211156108f857600080fd5b5061090586828701610730565b925050604084013590509250925092565b60008151610928818560208601610597565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161096a81601d850160208701610597565b91909101601d0192915050565b7f2f000000000000000000000000000000000000000000000000000000000000008152600082516109af816001850160208701610597565b9190910160010192915050565b7f7b226e616d65223a2200000000000000000000000000000000000000000000008152600088516109f4816009850160208d01610597565b7f20000000000000000000000000000000000000000000000000000000000000006009918401918201528851610a3181600a840160208d01610597565b8851910190610a4781600a840160208c01610597565b7f222c226465736372697074696f6e223a22000000000000000000000000000000600a92909101918201528651610a8581601b840160208b01610597565b7f222c220000000000000000000000000000000000000000000000000000000000601b92909101918201528551610ac381601e840160208a01610597565b610b5f610b36610b30610b07610b01601e868801017f70726f70657274696573223a7b226e756d626572223a00000000000000000000815260160190565b8a610916565b7f2c226e616d65223a220000000000000000000000000000000000000000000000815260090190565b87610916565b7f227d7d0000000000000000000000000000000000000000000000000000000000815260030190565b9b9a5050505050505050505050565b7f696d616765223a22000000000000000000000000000000000000000000000000815260008351610ba6816008850160208801610597565b7f3f69643d000000000000000000000000000000000000000000000000000000006008918401918201528351610be381600c840160208801610597565b7f222c220000000000000000000000000000000000000000000000000000000000600c9290910191820152600f01949350505050565b7f696d616765223a22000000000000000000000000000000000000000000000000815260008551610c51816008850160208a01610597565b80830190507f3f69643d000000000000000000000000000000000000000000000000000000008060088301528651610c9081600c850160208b01610597565b7f222c22616e696d6174696f6e5f75726c223a2200000000000000000000000000600c93909101928301528551610cce81601f850160208a01610597565b601f9201918201528351610ce9816023840160208801610597565b7f222c220000000000000000000000000000000000000000000000000000000000602392909101918201526026019695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d8257610d82610d21565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610dc757610dc7610d89565b500490565b600082821015610dde57610dde610d21565b500390565b600082610df257610df2610d89565b500690565b60008219821115610e0a57610e0a610d21565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e7657610e76610d21565b50029056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122049dbc126e94e318004307bb4947c8c93f032324de4a0521560d07d365580484164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "base64Encode(bytes)": {
        "params": {
          "unencoded": "bytes to base64-encode"
        }
      },
      "createMetadata(string,string,string,uint256,uint256)": {
        "params": {
          "description": "Description of NFT in metadata",
          "mediaData": "Data for media to include in json object",
          "name": "Name of NFT in metadata",
          "size": "Size of entire edition to show",
          "tokenOfEdition": "Token ID for specific token"
        }
      },
      "createTokenURI(string,string,string,string,uint256,uint256)": {
        "params": {
          "contentUrl": "URL of content to render",
          "description": "Description of NFT in metadata",
          "name": "Name of NFT in metadata",
          "size": "total count of editions",
          "thumbnailUrl": "optional URL of a thumbnail to render, for animated content only",
          "tokenOfEdition": "unique identifier of a token edition"
        }
      },
      "encodeMetadata(bytes)": {
        "params": {
          "json": "raw json to base64 and turn into a data-uri"
        }
      },
      "numberToString(uint256)": {
        "params": {
          "value": "number to return as a string"
        }
      },
      "tokenMediaData(string,string,uint256)": {
        "params": {
          "contentUrl": "URL of image to render for edition",
          "thumbnailUrl": "index of the content type to render for edition",
          "tokenOfEdition": "token identifier"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createMetadata(string,string,string,uint256,uint256)": {
        "notice": "Function to create the metadata json string for the nft edition "
      },
      "createTokenURI(string,string,string,string,uint256,uint256)": {
        "notice": "Generates edition metadata from storage information as base64-json blob Combines the media data and metadata "
      },
      "encodeMetadata(bytes)": {
        "notice": "Encodes the argument json bytes into base64-data uri format "
      },
      "numberToString(uint256)": {
        "notice": "Proxy to openzeppelin's toString function"
      },
      "tokenMediaData(string,string,uint256)": {
        "notice": "Generates edition metadata from storage information as base64-json blob Combines the media data and metadata "
      }
    },
    "notice": "Shared NFT logic for rendering metadata associated with editions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}