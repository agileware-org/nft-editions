{
  "address": "0x02B84C245906F3B448FE04AA87560D8838Cde9b2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "PaymentFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "payee",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct ISplitter.Shares[]",
          "name": "_shares",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeShake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9885e57768ffcad477a01d34c4124d62f005a20b4747b4f84b877aa0cef525f5",
  "receipt": {
    "to": null,
    "from": "0xDEE48aB42ceEb910c8C61a8966A57Dcf3E8B6706",
    "contractAddress": "0x02B84C245906F3B448FE04AA87560D8838Cde9b2",
    "transactionIndex": 11,
    "gasUsed": "871173",
    "logsBloom": "0x
    "blockHash": "0xa5a288bf1c917d9d5d7398fd7b72147a7979cc4536edf763934b772fa05e1bcf",
    "transactionHash": "0x9885e57768ffcad477a01d34c4124d62f005a20b4747b4f84b877aa0cef525f5",
    "logs": [],
    "blockNumber": 9827097,
    "cumulativeGasUsed": "3194423",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "75277c0311afcfc20af4823b32009c84",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PaymentFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct ISplitter.Shares[]\",\"name\":\"_shares\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeShake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"withdraw(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ShakeableSplitter.sol\":\"ShakeableSplitter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\r\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ninterface ISplitter {\\r\\n    struct Shares {\\r\\n        address payable payee;\\r\\n        uint16 bps;\\r\\n    }\\r\\n    \\r\\n    function initialize(Shares[] memory shares) external;\\r\\n\\r\\n}\",\"keccak256\":\"0xc8c4bb4e333da733a1ca59f30840666aa38181f840f9591b86bcf40f7d6a5cae\",\"license\":\"MIT\"},\"contracts/ShakeableSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\r\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\nimport \\\"./ISplitter.sol\\\";\\r\\n\\r\\ncontract ShakeableSplitter is Initializable, ISplitter, Context  {\\r\\n    event PaymentFailed(address to);\\r\\n    event PaymentReleased(address to, uint256 amount);\\r\\n    event PaymentReceived(address from, uint256 amount);\\r\\n\\r\\n    uint256 private _totalReleased;\\r\\n\\r\\n    mapping(address => uint256) private _released;\\r\\n    mapping(address => uint16) public shares;\\r\\n    address[] private _payees;\\r\\n\\r\\n    constructor() initializer { }\\r\\n\\r\\n    function initialize(Shares[] memory _shares) public override initializer {\\r\\n        uint256 totalShares = 0;\\r\\n        for (uint i = 0; i < _shares.length; i++) {\\r\\n            _payees.push(_shares[i].payee);\\r\\n            shares[_shares[i].payee] = _shares[i].bps;\\r\\n            totalShares += _shares[i].bps;\\r\\n        }\\r\\n        require(totalShares == 10_000, \\\"Shares don't sum up to 100%\\\");\\r\\n    }\\r\\n\\r\\n    receive() external payable virtual {\\r\\n        emit PaymentReceived(_msgSender(), msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total amount of Ether already released.\\r\\n     */\\r\\n    function totalReleased() public view returns (uint256) {\\r\\n        return _totalReleased;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of Ether already released to a payee.\\r\\n     */\\r\\n    function released(address account) public view returns (uint256) {\\r\\n        return _released[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\r\\n     * total shares and their previous withdrawals.\\r\\n     */\\r\\n    function withdraw(address payable account) public virtual {\\r\\n        _withdraw(account);\\r\\n    }\\r\\n\\r\\n    function _withdraw(address payable account) internal virtual {\\r\\n        require(shares[account] > 0, \\\"Splitter: account has no shares\\\");\\r\\n\\r\\n        uint256 totalReceived = address(this).balance + totalReleased();\\r\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\r\\n\\r\\n        require(payment != 0, \\\"Splitter: account is not due payment\\\");\\r\\n\\r\\n        _released[account] += payment;\\r\\n        _totalReleased += payment;\\r\\n\\r\\n        Address.sendValue(account, payment);\\r\\n        emit PaymentReleased(account, payment);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\r\\n     * already released amounts.\\r\\n     */\\r\\n    function _pendingPayment(address account, uint256 totalReceived, uint256 alreadyReleased) private view returns (uint256) {\\r\\n        return (totalReceived * shares[account]) / 10_000 - alreadyReleased;\\r\\n    }\\r\\n\\r\\n    function safeShake() external {\\r\\n        uint256 totalReceived = address(this).balance + _totalReleased;\\r\\n        for (uint i = 0; i < _payees.length; i++) {\\r\\n            if(_pendingPayment(_payees[i], totalReceived, _released[_payees[i]]) > 0) {\\r\\n                try this.withdraw(payable(_payees[i])) {\\r\\n                    // do nothing\\r\\n                } catch {\\r\\n                    emit PaymentFailed(_payees[i]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function shake() external {\\r\\n        uint256 totalReceived = address(this).balance + _totalReleased;\\r\\n        for (uint i = 0; i < _payees.length; i++) {\\r\\n            if(_pendingPayment(_payees[i], totalReceived, _released[_payees[i]]) > 0) {\\r\\n                _withdraw(payable(_payees[i]));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6125b3e05e32919246abeda30193b732d5fa77979f92f91445f3522b775fe3ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600054610100900460ff168061002a575060005460ff16155b6100915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156100b3576000805461ffff19166101011790555b80156100c5576000805461ff00191690555b50610e6b806100d56000396000f3fe6080604052600436106100745760003560e01c80639852595c1161004e5780639852595c1461011b578063cb88ac1614610171578063ce7c2ac214610191578063e33b7de3146101d557600080fd5b80631b5d4ee8146100cf57806351cff8d9146100e6578063825f98d41461010657600080fd5b366100ca577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770336040805173ffffffffffffffffffffffffffffffffffffffff90921682523460208301520160405180910390a1005b600080fd5b3480156100db57600080fd5b506100e46101ea565b005b3480156100f257600080fd5b506100e4610101366004610b44565b6103d5565b34801561011257600080fd5b506100e46103e1565b34801561012757600080fd5b5061015e610136366004610b44565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b6040519081526020015b60405180910390f35b34801561017d57600080fd5b506100e461018c366004610c0f565b61046d565b34801561019d57600080fd5b506101c26101ac366004610b44565b60036020526000908152604090205461ffff1681565b60405161ffff9091168152602001610168565b3480156101e157600080fd5b5060015461015e565b6000600154476101fa9190610d26565b905060005b6004548110156103d157600061029b6004838154811061022157610221610d3e565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600260006004878154811061026457610264610d3e565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205461074e565b11156103bf573073ffffffffffffffffffffffffffffffffffffffff166351cff8d9600483815481106102d0576102d0610d3e565b60009182526020909120015460405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401600060405180830381600087803b15801561034257600080fd5b505af1925050508015610353575060015b6103bf577f36899e48161ee4504f5f89aa55f7aed73460d464cb62f64e03057df7dbcdd0aa6004828154811061038b5761038b610d3e565b6000918252602091829020015460405173ffffffffffffffffffffffffffffffffffffffff90911681520160405180910390a15b806103c981610d6d565b9150506101ff565b5050565b6103de816107a4565b50565b6000600154476103f19190610d26565b905060005b6004548110156103d15760006104186004838154811061022157610221610d3e565b111561045b5761045b6004828154811061043457610434610d3e565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff166107a4565b8061046581610d6d565b9150506103f6565b600054610100900460ff1680610486575060005460ff16155b610517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff1615801561055657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6000805b83518110156106af57600484828151811061057757610577610d3e565b6020908102919091018101515182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905583518490829081106105ec576105ec610d3e565b6020026020010151602001516003600086848151811061060e5761060e610d3e565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555083818151811061068057610680610d3e565b60200260200101516020015161ffff168261069b9190610d26565b9150806106a781610d6d565b91505061055a565b50806127101461071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f53686172657320646f6e27742073756d20757020746f20313030250000000000604482015260640161050e565b5080156103d157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120548290612710906107889061ffff1686610da6565b6107929190610de3565b61079c9190610e1e565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604090205461ffff16610834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f53706c69747465723a206163636f756e7420686173206e6f2073686172657300604482015260640161050e565b600061083f60015490565b6108499047610d26565b90506000610883838361087e8673ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b61074e565b905080610911576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f53706c69747465723a206163636f756e74206973206e6f74206475652070617960448201527f6d656e7400000000000000000000000000000000000000000000000000000000606482015260840161050e565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604081208054839290610946908490610d26565b92505081905550806001600082825461095f9190610d26565b9091555061096f905083826109c3565b6040805173ffffffffffffffffffffffffffffffffffffffff85168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b80471015610a2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161050e565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a87576040519150601f19603f3d011682016040523d82523d6000602084013e610a8c565b606091505b5050905080610b1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161050e565b505050565b73ffffffffffffffffffffffffffffffffffffffff811681146103de57600080fd5b600060208284031215610b5657600080fd5b8135610b6181610b22565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610bba57610bba610b68565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610c0757610c07610b68565b604052919050565b60006020808385031215610c2257600080fd5b823567ffffffffffffffff80821115610c3a57600080fd5b818501915085601f830112610c4e57600080fd5b813581811115610c6057610c60610b68565b610c6e848260051b01610bc0565b818152848101925060069190911b830184019087821115610c8e57600080fd5b928401925b81841015610cec5760408489031215610cac5760008081fd5b610cb4610b97565b8435610cbf81610b22565b81528486013561ffff81168114610cd65760008081fd5b8187015283526040939093019291840191610c93565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610d3957610d39610cf7565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9f57610d9f610cf7565b5060010190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dde57610dde610cf7565b500290565b600082610e19577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015610e3057610e30610cf7565b50039056fea26469706673582212208479e8aa861a9d487ad22ae4810110c7d9e270dfd89c8f3ec59c4f1959c20cfa64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80639852595c1161004e5780639852595c1461011b578063cb88ac1614610171578063ce7c2ac214610191578063e33b7de3146101d557600080fd5b80631b5d4ee8146100cf57806351cff8d9146100e6578063825f98d41461010657600080fd5b366100ca577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770336040805173ffffffffffffffffffffffffffffffffffffffff90921682523460208301520160405180910390a1005b600080fd5b3480156100db57600080fd5b506100e46101ea565b005b3480156100f257600080fd5b506100e4610101366004610b44565b6103d5565b34801561011257600080fd5b506100e46103e1565b34801561012757600080fd5b5061015e610136366004610b44565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b6040519081526020015b60405180910390f35b34801561017d57600080fd5b506100e461018c366004610c0f565b61046d565b34801561019d57600080fd5b506101c26101ac366004610b44565b60036020526000908152604090205461ffff1681565b60405161ffff9091168152602001610168565b3480156101e157600080fd5b5060015461015e565b6000600154476101fa9190610d26565b905060005b6004548110156103d157600061029b6004838154811061022157610221610d3e565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600260006004878154811061026457610264610d3e565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205461074e565b11156103bf573073ffffffffffffffffffffffffffffffffffffffff166351cff8d9600483815481106102d0576102d0610d3e565b60009182526020909120015460405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401600060405180830381600087803b15801561034257600080fd5b505af1925050508015610353575060015b6103bf577f36899e48161ee4504f5f89aa55f7aed73460d464cb62f64e03057df7dbcdd0aa6004828154811061038b5761038b610d3e565b6000918252602091829020015460405173ffffffffffffffffffffffffffffffffffffffff90911681520160405180910390a15b806103c981610d6d565b9150506101ff565b5050565b6103de816107a4565b50565b6000600154476103f19190610d26565b905060005b6004548110156103d15760006104186004838154811061022157610221610d3e565b111561045b5761045b6004828154811061043457610434610d3e565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff166107a4565b8061046581610d6d565b9150506103f6565b600054610100900460ff1680610486575060005460ff16155b610517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff1615801561055657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6000805b83518110156106af57600484828151811061057757610577610d3e565b6020908102919091018101515182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905583518490829081106105ec576105ec610d3e565b6020026020010151602001516003600086848151811061060e5761060e610d3e565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555083818151811061068057610680610d3e565b60200260200101516020015161ffff168261069b9190610d26565b9150806106a781610d6d565b91505061055a565b50806127101461071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f53686172657320646f6e27742073756d20757020746f20313030250000000000604482015260640161050e565b5080156103d157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120548290612710906107889061ffff1686610da6565b6107929190610de3565b61079c9190610e1e565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604090205461ffff16610834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f53706c69747465723a206163636f756e7420686173206e6f2073686172657300604482015260640161050e565b600061083f60015490565b6108499047610d26565b90506000610883838361087e8673ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b61074e565b905080610911576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f53706c69747465723a206163636f756e74206973206e6f74206475652070617960448201527f6d656e7400000000000000000000000000000000000000000000000000000000606482015260840161050e565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604081208054839290610946908490610d26565b92505081905550806001600082825461095f9190610d26565b9091555061096f905083826109c3565b6040805173ffffffffffffffffffffffffffffffffffffffff85168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b80471015610a2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161050e565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a87576040519150601f19603f3d011682016040523d82523d6000602084013e610a8c565b606091505b5050905080610b1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161050e565b505050565b73ffffffffffffffffffffffffffffffffffffffff811681146103de57600080fd5b600060208284031215610b5657600080fd5b8135610b6181610b22565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610bba57610bba610b68565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610c0757610c07610b68565b604052919050565b60006020808385031215610c2257600080fd5b823567ffffffffffffffff80821115610c3a57600080fd5b818501915085601f830112610c4e57600080fd5b813581811115610c6057610c60610b68565b610c6e848260051b01610bc0565b818152848101925060069190911b830184019087821115610c8e57600080fd5b928401925b81841015610cec5760408489031215610cac5760008081fd5b610cb4610b97565b8435610cbf81610b22565b81528486013561ffff81168114610cd65760008081fd5b8187015283526040939093019291840191610c93565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610d3957610d39610cf7565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9f57610d9f610cf7565b5060010190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dde57610dde610cf7565b500290565b600082610e19577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015610e3057610e30610cf7565b50039056fea26469706673582212208479e8aa861a9d487ad22ae4810110c7d9e270dfd89c8f3ec59c4f1959c20cfa64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "withdraw(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2412,
        "contract": "contracts/ShakeableSplitter.sol:ShakeableSplitter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2415,
        "contract": "contracts/ShakeableSplitter.sol:ShakeableSplitter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4935,
        "contract": "contracts/ShakeableSplitter.sol:ShakeableSplitter",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4939,
        "contract": "contracts/ShakeableSplitter.sol:ShakeableSplitter",
        "label": "_released",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4943,
        "contract": "contracts/ShakeableSplitter.sol:ShakeableSplitter",
        "label": "shares",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 4946,
        "contract": "contracts/ShakeableSplitter.sol:ShakeableSplitter",
        "label": "_payees",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}