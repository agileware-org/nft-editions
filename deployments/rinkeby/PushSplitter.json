{
  "address": "0x3533A4d6eCadA9FD5f398290D6585454FB311A63",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "payee",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct ISplitter.Shares[]",
          "name": "shares",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb94de1c2836751f1ad9cc66a6ce45e1b561cc8f3e39b38e86b13cb4224aa3ce1",
  "receipt": {
    "to": null,
    "from": "0xDEE48aB42ceEb910c8C61a8966A57Dcf3E8B6706",
    "contractAddress": "0x3533A4d6eCadA9FD5f398290D6585454FB311A63",
    "transactionIndex": 25,
    "gasUsed": "639944",
    "logsBloom": "0x
    "blockHash": "0xb31e4f0bafea193f98131f7a54db4cf4de666a8613321a84e3397ff945fe58c1",
    "transactionHash": "0xb94de1c2836751f1ad9cc66a6ce45e1b561cc8f3e39b38e86b13cb4224aa3ce1",
    "logs": [],
    "blockNumber": 9813345,
    "cumulativeGasUsed": "9274410",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "128ba58fa3fb40d5fcb9050e6e7bc018",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct ISplitter.Shares[]\",\"name\":\"shares\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PushSplitter.sol\":\"PushSplitter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\r\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ninterface ISplitter {\\r\\n    struct Shares {\\r\\n        address payable payee;\\r\\n        uint16 bps;\\r\\n    }\\r\\n    \\r\\n    function initialize(Shares[] memory shares) external;\\r\\n\\r\\n}\",\"keccak256\":\"0xc8c4bb4e333da733a1ca59f30840666aa38181f840f9591b86bcf40f7d6a5cae\",\"license\":\"MIT\"},\"contracts/PushSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\r\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport \\\"./ISplitter.sol\\\";\\r\\n\\r\\ncontract PushSplitter is Initializable, ISplitter {\\r\\n    address[] internal _payees;\\r\\n    mapping(address => uint16) internal _shares;\\r\\n    \\r\\n    constructor() initializer { }\\r\\n    \\r\\n    function initialize(Shares[] memory shares) public override initializer {\\r\\n        require(shares.length > 0, \\\"Splitter: no payees\\\");\\r\\n        uint256 totalShares = 0;\\r\\n        for (uint i = 0; i < _payees.length; i++) {\\r\\n            _addPayee(shares[i].payee, shares[i].bps);\\r\\n            totalShares += shares[i].bps;\\r\\n        }\\r\\n        require(totalShares == 10_000, \\\"Shares don't sum up to 10000 pbs\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Adds a new payee to the contract.\\r\\n     * \\r\\n     * @param account the address of the payee to add.\\r\\n     * @param shares the number of shares owned by the payee.\\r\\n     */\\r\\n    function _addPayee(address account, uint256 shares) internal {\\r\\n        require(account != address(0x0), \\\"Splitter: account is 0x0 address\\\");\\r\\n        require(shares > 0 && shares < 10_000, \\\"Splitter: invalid shares\\\");\\r\\n        require(_shares[account] == 0, \\\"Splitter: account duplicated\\\");\\r\\n\\r\\n        _payees.push(account);\\r\\n        _shares[account] = uint16(shares);\\r\\n    }\\r\\n\\r\\n    receive() external payable virtual {\\r\\n        uint256 value = address(this).balance;\\r\\n        for (uint i = 0; i < _payees.length; i++) {\\r\\n            uint256 amount = value * _shares[_payees[i]] / 10_000;\\r\\n            Address.sendValue(payable(_payees[i]), amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb3dbfd82d709a2e215d7d068f59b37f9bd24f6334ecc84d615e6fdc02f2197c8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600054610100900460ff168061002a575060005460ff16155b6100915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156100b3576000805461ffff19166101011790555b80156100c5576000805461ff00191690555b50610a3d806100d56000396000f3fe6080604052600436106100225760003560e01c8063cb88ac16146100f757600080fd5b366100f2574760005b6001548110156100ee576000612710600260006001858154811061005157610051610737565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020546100919061ffff1685610795565b61009b91906107d2565b90506100db600183815481106100b3576100b3610737565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1682610119565b50806100e68161080d565b91505061002b565b5050005b600080fd5b34801561010357600080fd5b506101176101123660046108ed565b61027d565b005b80471015610188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146101e2576040519150601f19603f3d011682016040523d82523d6000602084013e6101e7565b606091505b5050905080610278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161017f565b505050565b600054610100900460ff1680610296575060005460ff16155b610322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161017f565b600054610100900460ff1615801561036157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b60008251116103cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f53706c69747465723a206e6f2070617965657300000000000000000000000000604482015260640161017f565b6000805b600154811015610463576104228482815181106103ef576103ef610737565b60200260200101516000015185838151811061040d5761040d610737565b60200260200101516020015161ffff16610503565b83818151811061043457610434610737565b60200260200101516020015161ffff168261044f91906109ef565b91508061045b8161080d565b9150506103d0565b5080612710146104cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53686172657320646f6e27742073756d20757020746f20313030303020706273604482015260640161017f565b5080156104ff57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b73ffffffffffffffffffffffffffffffffffffffff8216610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53706c69747465723a206163636f756e74206973203078302061646472657373604482015260640161017f565b600081118015610591575061271081105b6105f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f53706c69747465723a20696e76616c6964207368617265730000000000000000604482015260640161017f565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205461ffff1615610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f53706c69747465723a206163636f756e74206475706c69636174656400000000604482015260640161017f565b600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff93909316928317905560009182526002602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156107cd576107cd610766565b500290565b600082610808577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561083f5761083f610766565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561089857610898610846565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156108e5576108e5610846565b604052919050565b6000602080838503121561090057600080fd5b823567ffffffffffffffff8082111561091857600080fd5b818501915085601f83011261092c57600080fd5b81358181111561093e5761093e610846565b61094c848260051b0161089e565b818152848101925060069190911b83018401908782111561096c57600080fd5b928401925b818410156109e4576040848903121561098a5760008081fd5b610992610875565b843573ffffffffffffffffffffffffffffffffffffffff811681146109b75760008081fd5b81528486013561ffff811681146109ce5760008081fd5b8187015283526040939093019291840191610971565b979650505050505050565b60008219821115610a0257610a02610766565b50019056fea26469706673582212203b3bed3b873e3e450c8982fca7543d08ad54cd25bea7aaab73e31aca37736aaf64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100225760003560e01c8063cb88ac16146100f757600080fd5b366100f2574760005b6001548110156100ee576000612710600260006001858154811061005157610051610737565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020546100919061ffff1685610795565b61009b91906107d2565b90506100db600183815481106100b3576100b3610737565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1682610119565b50806100e68161080d565b91505061002b565b5050005b600080fd5b34801561010357600080fd5b506101176101123660046108ed565b61027d565b005b80471015610188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146101e2576040519150601f19603f3d011682016040523d82523d6000602084013e6101e7565b606091505b5050905080610278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161017f565b505050565b600054610100900460ff1680610296575060005460ff16155b610322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161017f565b600054610100900460ff1615801561036157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b60008251116103cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f53706c69747465723a206e6f2070617965657300000000000000000000000000604482015260640161017f565b6000805b600154811015610463576104228482815181106103ef576103ef610737565b60200260200101516000015185838151811061040d5761040d610737565b60200260200101516020015161ffff16610503565b83818151811061043457610434610737565b60200260200101516020015161ffff168261044f91906109ef565b91508061045b8161080d565b9150506103d0565b5080612710146104cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53686172657320646f6e27742073756d20757020746f20313030303020706273604482015260640161017f565b5080156104ff57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b73ffffffffffffffffffffffffffffffffffffffff8216610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53706c69747465723a206163636f756e74206973203078302061646472657373604482015260640161017f565b600081118015610591575061271081105b6105f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f53706c69747465723a20696e76616c6964207368617265730000000000000000604482015260640161017f565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205461ffff1615610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f53706c69747465723a206163636f756e74206475706c69636174656400000000604482015260640161017f565b600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff93909316928317905560009182526002602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156107cd576107cd610766565b500290565b600082610808577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561083f5761083f610766565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561089857610898610846565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156108e5576108e5610846565b604052919050565b6000602080838503121561090057600080fd5b823567ffffffffffffffff8082111561091857600080fd5b818501915085601f83011261092c57600080fd5b81358181111561093e5761093e610846565b61094c848260051b0161089e565b818152848101925060069190911b83018401908782111561096c57600080fd5b928401925b818410156109e4576040848903121561098a5760008081fd5b610992610875565b843573ffffffffffffffffffffffffffffffffffffffff811681146109b75760008081fd5b81528486013561ffff811681146109ce5760008081fd5b8187015283526040939093019291840191610971565b979650505050505050565b60008219821115610a0257610a02610766565b50019056fea26469706673582212203b3bed3b873e3e450c8982fca7543d08ad54cd25bea7aaab73e31aca37736aaf64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3184,
        "contract": "contracts/PushSplitter.sol:PushSplitter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3187,
        "contract": "contracts/PushSplitter.sol:PushSplitter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5499,
        "contract": "contracts/PushSplitter.sol:PushSplitter",
        "label": "_payees",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5503,
        "contract": "contracts/PushSplitter.sol:PushSplitter",
        "label": "_shares",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint16)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}